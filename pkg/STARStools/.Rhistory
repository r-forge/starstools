?nlayers
nlayers(wind_raster_monthly)
climate_data= wind_raster_monthly
date_range=c("2000-01-01","2005-12-31")
climate_data_dates=as.Date(climate_data@zvalue)
climate_data_dates
length(date_range)==2
startdate=as.Date(date_range[1])#
			enddate=as.Date(date_range[2])
climate_data_dates_idx_subset=climate_data_dates_idx[(climate_data_dates >= startdate & climate_data_dates <= enddate)]
climate_data_dates_idx=1:nlayers(climate_data)
climate_data_dates_idx_subset=climate_data_dates_idx[(climate_data_dates >= startdate & climate_data_dates <= enddate)]
climate_data_dates_subset=climate_data_dates[climate_data_dates_idx_subset]
climate_data_subset=subset(climate_data,climate_data_dates_idx_subset)
wind_raster_monthly@zvalue
wind_raster_monthly_annual_means=climate_summaries(climate_data=wind_raster_monthly,date_range=c("2000-01-01","2005-12-31"),summary_type="mean",summary_interval="yearly")
wind_raster_monthly_annual_means=climate_summaries(climate_data=wind_raster_monthly,summary_type="mean",summary_interval="yearly")
wind_raster_monthly_annual_means
wind_raster_monthly_annual_means=climate_summaries(climate_data=wind_raster_monthly,date_range=c("2000-01-01","2005-12-31"),summary_type="mean",summary_interval="yearly")
	if(!missing(date_range))#
	{#
		climate_data_dates=as.Date(climate_data@zvalue)#
		if(length(date_range)==2)#
		{#
			startdate=as.Date(date_range[1])#
			enddate=as.Date(date_range[2])#
			#
			climate_data_dates_idx_subset=climate_data_dates_idx[(climate_data_dates >= startdate & climate_data_dates <= enddate)]#
			climate_data_dates_subset=climate_data_dates[climate_data_dates_idx_subset]#
			climate_data_subset=subset(climate_data,climate_data_dates_idx_subset)#
		}#
	}
wind_raster_monthly_annual_means=climate_summaries(climate_data=wind_raster_monthly,date_range=c("2000-1-1","2005-12-31"),summary_type="mean",summary_interval="yearly")
climate_data_dates_idx
climate_data_dates=as.Date(climate_data@zvalue)
climate_data_dates
class(climate_data_dates)
startdate
class(startdate)
enddate
class(enddate)
wind_raster_monthly_annual_means=climate_summaries(climate_data=wind_raster_monthly,summary_type="mean",summary_interval="yearly",date_range=c("2000-01-01","2005-12-31"))
length(date_range)
date_range
class(date_range)
wind_raster_monthly_annual_means=climate_summaries(climate_data=wind_raster_monthly,summary_type="mean",summary_interval="yearly",date_range=date_range)
date_range[1]
date_range[2]
# TODO: Add comment#
# #
# Author: jonathan#
################################################################################
#
#
climate_summaries <- function(climate_data,date_range,summary_type,summary_interval="all",apply_maxmin,verbose=FALSE,#
		probs,#
		# For which.max/min.simple#
		tie_value="random"#
		)#
{#
	# This works on rasters only.#
	#
	climate_data_dates_idx=1:nlayers(climate_data)#
	print(date_range)#
	if(!missing(date_range))#
	{#
		climate_data_dates=as.Date(climate_data@zvalue)#
		if(length(date_range)==2)#
		{#
			startdate=as.Date(date_range[1])#
			enddate=as.Date(date_range[2])#
			#
			climate_data_dates_idx_subset=climate_data_dates_idx[(climate_data_dates >= startdate & climate_data_dates <= enddate)]#
			climate_data_dates_subset=climate_data_dates[climate_data_dates_idx_subset]#
			climate_data_subset=subset(climate_data,climate_data_dates_idx_subset)#
		}#
	} else#
	{#
		climate_data_dates_idx_subset=climate_data_dates_idx#
		climate_data_dates_subset=climate_data_dates#
		climate_data_subset=climate_data#
	}	#
	#
	# Set up intervals#
	if(summary_interval=="all")#
	{#
		summary_interval_idx=rep(1,length(climate_data_dates_idx_subset))#
		zvalue_final="9999-01-01"#
	}#
	#
	if(summary_interval=="monthly")#
	{#
		summary_interval_idx=as.factor(as.numeric(format(climate_data_dates_subset,"%m")))#
		zvalue_final=as.character(as.Date(paste("9999",unique(as.numeric(format(climate_data_dates_subset,"%m"))),1,sep="-")))#
		#
		# TO DO, FIX ZVALUE#
	}#
	#
	if(summary_interval=="yearly")#
	{#
		summary_interval_idx=as.factor(as.numeric(format(climate_data_dates_subset,"%Y")))#
#
		zvalue_final=as.character(as.Date(paste(unique(as.numeric(format(climate_data_dates_subset,"%Y"))),1,1,sep="-")))#
		if(verbose)#
		{#
			print(summary_interval_idx)#
			print(zvalue_final)#
		}#
	}#
	#
	# Perform#
	if(summary_type=="sum")#
	{#
		climate_summary=stackApply(climate_data_subset, summary_interval_idx, sum)#
	}#
	#
	if(summary_type=="mean")#
	{#
		climate_summary=stackApply(climate_data_subset, summary_interval_idx, mean)#
	}#
	#
	if(summary_type=="min")#
	{#
		climate_summary=stackApply(climate_data_subset, summary_interval_idx, min)#
	}#
	#
	if(summary_type=="max")#
	{#
		climate_summary=stackApply(climate_data_subset, summary_interval_idx, max)#
	}#
	#
	if(summary_type=="sd")#
	{#
		climate_summary=stackApply(climate_data_subset, summary_interval_idx, sd)#
	}#
	#
	if(summary_type=="cv")#
	{#
		climate_summary=stackApply(climate_data_subset, summary_interval_idx, cv)#
	}#
	#
	if(summary_type=="spi")#
	{#
	# Indices are not working right now, so we are going to ignore the indices#
	#	climate_summary=stackApply(climate_data_subset, summary_interval_idx, spi)#
	#	print(climate_data_subset)#
		climate_summary=calc(climate_data_subset,fun=spi.matrix,na.rm=TRUE)#
	}#
	#
	if(summary_type=="which.max.simple")#
	{#
		climate_summary=stackApply(climate_data_subset, summary_interval_idx, which.max.simple, tie_value=tie_value)#
		if(!missing(apply_maxmin))#
		{#
			climate_summary_maxmin_mask=index_raster_to_mask(climate_summary,nlayers=nlayers(climate_data))#
			climate_summary=calc((climate_summary_maxmin_mask*apply_maxmin),sum)#
		}#
	}#
	#
	if(summary_type=="which.min.simple")#
	{#
		climate_summary=stackApply(climate_data_subset, summary_interval_idx, which.min.simple, tie_value=tie_value)#
		if(!missing(apply_maxmin))#
		{#
			climate_summary_maxmin_mask=index_raster_to_mask(climate_summary,nlayers=nlayers(climate_data))#
			climate_summary=calc((climate_summary_maxmin_mask*apply_maxmin),sum)#
		}#
	}#
	#
	if(summary_type=="quantile")#
	{#
		# We should probably check to make sure the probs are within 0 to 1.#
		quantile_function=function(x, na.rm){  probs = probs; quantile(x, probs =#
							probs, na.rm=na.rm, type=8 ) }	#
		climate_summary=stackApply(climate_data_subset, summary_interval_idx, quantile_function)#
	}#
	#
	climate_summary@zvalue=zvalue_final#
	return(climate_summary)#
}
wind_raster_monthly_annual_means=climate_summaries(climate_data=wind_raster_monthly,summary_type="mean",summary_interval="yearly",date_range=date_range)
wind_raster_monthly_annual_means
wind_raster_monthly_annual_means@zvalue
?writeRaster
?bbox
require(raster)
?bbox
?mapply
require("snow")
?snow
?tapply
?lapply
?as.list
?unlist
?rasterize
?replicate
?rep
?SpatialPoints
require(sp)
? spRbind
require(rgdal)
?spRbind
?? spRbind
data(meuse)#
xy = meuse[c("x", "y")] # retrieve coordinates as data.frame
class(xy)
xy
data(meuse) # reload data.frame#
coordinates(meuse) = c("x", "y") # specify column names#
class(meuse)
meuse@data
class(meuse)
meuse[1,]
meuse[1:10,]
class(meuse[1:10,])
meuse1=meuse[1:10,]#
meuse2=meuse[11:20,]
meuse_list=list(meuse1,meuse2)
meuse_list
meuse1=meuse[1:10,]#
meuse2=meuse[11:20,]#
meuse3=meuse[21:50,]#
meuse_list=list(meuse1,meuse2,meuse3)
meuse_list
?bbox
?extract
?by
?group
?list
?split
? object.size
install.packages("gdata")
?ll
require(gdata)
?ll
mpi.universe.size()
? mpi.universe.size()
require(Rmpi)
? mpi.universe.size
install.packages("multicore")
?matrix
?zpp
?zoo
require(zoo)
?zoo
?sapply
install.packages(c("rj", "rj.gd"), repos="http://download.walware.de/rj-1.0")
require(rj)
require(rj-gd)
require(rj.gd)
update.packages()
install.packages("rj", repos="http://download.walware.de/rj-0.5")
?spTransform
require(rgdal)
?spTransform
?setClass
?setOldClass
?list
?union
?merge
?union
?SpatialPointsDataFrame
?class
?extract
require(raster)
?extract
?unlist
? getAnywhere
?MATCH.times
require(zoo)
?MATCH.times
?subset
?time
?subset
?subset.zoo
?>
??>
?gt
?logical
?match
require(chron)
?as.data.frame
?do.call
?mapply
?rbind
install.packages("gam")
?na.omit
?unlist
?crop
install.packages('mvbutils')
install.packages("Roxygen")
install.packages("roxygen")
?package.skeleton
install.packages("roxygen")
install.packages("roxygen", repos="http://R-Forge.R-project.org")
install.packages("roxygen2", repos="http://R-Forge.R-project.org")
install.packages("roxygen2")
?setGeneric
?importFrom
?setMethod
?setClass
??importFrom
?asNamespace
?setMethod
require(zoo)
getMethod(as.yearmon)
getMethod("as.yearmon")
?as.yearmon
?setMethod
?INSTALL
getGeneric
?getGeneric
?getGeneric("as.list")
getGeneric("as.list")
getGeneric("as.yearmon")
showMethods("as.list")
showMethods("as.vector")
showMethods("as.yearmon")
require(zoo)
showMethods("as.yearmon")
install.packages("rasterVis")
?maptools
for(i in 1:10) { print(i) }
install.packages("STARStools", repos="http://R-Forge.R-project.org")
install.package("Rd2roxygen")
install.packages("Rd2roxygen")
require(Rd2roxygen)
?Rd2roxygen
Rd2roxygen("/Users/jonathan/Documents/code/eclipse/climstats/climstats")
update.packages()
?predict
?corr
?cor
?dir
list.files()
?sort
sort(list.files())
?seq.Dates
?seq
seq(from=as.Date("2000/1/1"), to=as.Date("20010/12/1") by="month")
seq(from=as.Date("2000/1/1"), to=as.Date("20010/12/1"), by="month")
seq(from=as.Date("2000/1/1"), to=as.Date("2010/12/1"), by="month")
class(seq(from=as.Date("2000/1/1"), to=as.Date("2010/12/1"), by="month"))
require(raster)
?nlayers
require(climstats)
?list.files
list.files()
list.files(pattern=glob2rx(*.envi))
list.files(pattern=glob2rx("*Library"))
list.files(path="/",pattern=glob2rx("*Library"))
list.files(path="/",pattern=glob2rx("*Library"),full.names=TRUE)
?stack
?setOptions
?sapply
?band
?raster
?stack
?climate_summaries
?pdf
?brick
?error
?try
?projection
years<-seq(1895,2007,1)#
years<-as.character(years)
years
file.names<-list.files(path="F://projects//water_deficit//data//raster/aet",pattern=glob2rx("*years[1]*.tif"), full.names=TRUE)
glob2rx("*years[1]*.tif")
"*years[1]*.tif"
paste("*",years[1],"*.tif",sep="")
removeTmpFiles
? removeTmpFiles
require(raster)
? removeTmpFiles
?showOptions
showOptions()
?trash
?memory
??memory
data(package="STARStools")
moo=data(tahoe_highre)
moo=data(tahoe_highrez)
moo=data("tahoe_highrez")
?data
data("tahoe_highrez")
data("tahoe_highrez",package="STARStools")
tahoe_highrez
plot(tahoe_highrez)
require(rgdal)
require(STARStools)
plot(tahoe_highrez)
plotRBG(tahoe_highrez)
plotRGB(tahoe_highrez)
require(STARStools)
raster_retile
?raster_retile
require(STARStools)
raster_retile
# TODO: Add comment#
# #
# Author: jonathan#
################################################################################
#
require(roxygen)#
setwd("/Users/jonathan/Documents/code/eclipse/STARStools/pkg/STARStools")#
# method.skeleton("subset.zoo.SpatialPointsDataFrameListZoo","SpatialPointsDataFrameListZoo")#
roxygenize(package.dir="/Users/jonathan/Documents/code/eclipse/STARStools/pkg/STARStools",roxygen.dir="/Users/jonathan/Documents/code/eclipse/STARStools/pkg/STARStools",copy.package=FALSE,unlink.target=FALSE)
# TODO: Add comment#
# #
# Author: jonathan#
################################################################################
#
require(roxygen)#
setwd("/Users/jonathan/Documents/code/eclipse/STARStools/pkg/STARStools")#
# method.skeleton("subset.zoo.SpatialPointsDataFrameListZoo","SpatialPointsDataFrameListZoo")#
roxygenize(package.dir="/Users/jonathan/Documents/code/eclipse/STARStools/pkg/STARStools",roxygen.dir="/Users/jonathan/Documents/code/eclipse/STARStools/pkg/STARStools",copy.package=FALSE,unlink.target=FALSE)
# TODO: Add comment#
# #
# Author: jonathan#
################################################################################
#
require(roxygen)#
setwd("/Users/jonathan/Documents/code/eclipse/STARStools/pkg/STARStools")#
# method.skeleton("subset.zoo.SpatialPointsDataFrameListZoo","SpatialPointsDataFrameListZoo")#
roxygenize(package.dir="/Users/jonathan/Documents/code/eclipse/STARStools/pkg/STARStools",roxygen.dir="/Users/jonathan/Documents/code/eclipse/STARStools/pkg/STARStools",copy.package=FALSE,unlink.target=FALSE)
