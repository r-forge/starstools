?circ.mean
?arrow.plot
require(fields)
?arrow.plot
?rasterToPoints
azimuth_raster_agg_points=rasterToPoints(azimuth_raster_agg,spatial=FALSE)
azimuth_raster_agg_points
?arrow.plot
azimuth_raster_agg_points[,3]
	azimuth_raster_agg_points_u=sin(azimuth_raster_agg_points[,3])#
	azimuth_raster_agg_points_v=cos(azimuth_raster_agg_points[,3])
require(fields)
require("fields")
arrow.plot(azimuth_raster_agg_points[,1],azimuth_raster_agg_points[,2],u=azimuth_raster_agg_points_u,v=azimuth_raster_agg_points_v)
arrow.plot(azimuth_raster_agg_points[,1],azimuth_raster_agg_points[,2],u=azimuth_raster_agg_points_u,v=azimuth_raster_agg_points_v)
plot.new()
arrow.plot(azimuth_raster_agg_points[,1],azimuth_raster_agg_points[,2],u=azimuth_raster_agg_points_u,v=azimuth_raster_agg_points_v)
plot(azimuth_raster_agg_points[,1],azimuth_raster_agg_points[,2])
max_arrows_per_dim=25
ncol_azimuth_raster=ncol(azimuth_raster)#
	nrow_azimuth_raster=nrow(azimuth_raster)#
	#
	col_scale=ncol_azimuth_raster/max_arrows_per_dim#
	row_scale=nrow_azimuth_raster/max_arrows_per_dim#
	#
	fact=max(col_scale,row_scale)#
	#
	azimuth_raster_agg=aggregate(x=azimuth_raster,fact=fact,fun=circ.mean.na.rm)#
#
	azimuth_raster_agg_points=rasterToPoints(azimuth_raster_agg,spatial=FALSE)#
	#
	azimuth_raster_agg_points_u=sin(azimuth_raster_agg_points[,3])#
	azimuth_raster_agg_points_v=cos(azimuth_raster_agg_points[,3])
plot(azimuth_raster_agg_points[,1],azimuth_raster_agg_points[,2])
arrow.plot(azimuth_raster_agg_points[,1],azimuth_raster_agg_points[,2],u=azimuth_raster_agg_points_u,v=azimuth_raster_agg_points_v)
basemap=azimuth_raster
plot(basemap)
arrow.plot(azimuth_raster_agg_points[,1],azimuth_raster_agg_points[,2],u=azimuth_raster_agg_points_u,v=azimuth_raster_agg_points_v)
require(sfsmisc)
install.packages(sfsmisc)
install.packages("sfsmisc")
require(sfsmisc)
arrow.plot(azimuth_raster_agg_points[,1],azimuth_raster_agg_points[,2],u=azimuth_raster_agg_points_u,v=azimuth_raster_agg_points_v,arrowfun=p.arrows)
arrowfun=arrows
	plot(basemap)#
	arrow.plot(azimuth_raster_agg_points[,1],azimuth_raster_agg_points[,2],#
			u=azimuth_raster_agg_points_u,#
			v=azimuth_raster_agg_points_v,#
			arrowfun=arrowfun)
azimuth_raster_agg
arrow.ex=1/min(nrow(azimuth_raster_agg),ncol(azimuth_raster_agg))
arrow.ex
	plot(basemap)#
	arrow.plot(azimuth_raster_agg_points[,1],azimuth_raster_agg_points[,2],#
			u=azimuth_raster_agg_points_u,#
			v=azimuth_raster_agg_points_v,#
			arrowfun=arrowfun,arrow.ex=arrow.ex)
arrow.ex
arrow.ex=.004
	plot(basemap)#
	arrow.plot(azimuth_raster_agg_points[,1],azimuth_raster_agg_points[,2],#
			u=azimuth_raster_agg_points_u,#
			v=azimuth_raster_agg_points_v,#
			arrowfun=arrowfun,arrow.ex=arrow.ex)
	plot(basemap)#
	arrow.plot(azimuth_raster_agg_points[,1],azimuth_raster_agg_points[,2],#
			u=azimuth_raster_agg_points_u,#
			v=azimuth_raster_agg_points_v,#
			arrowfun=arrowfun,arrow.ex=arrow.ex)
arrow.ex=.04
	plot(basemap)#
	arrow.plot(azimuth_raster_agg_points[,1],azimuth_raster_agg_points[,2],#
			u=azimuth_raster_agg_points_u,#
			v=azimuth_raster_agg_points_v,#
			arrowfun=arrowfun,arrow.ex=arrow.ex)
	plot(basemap)#
	arrow.plot(azimuth_raster_agg_points[,1],azimuth_raster_agg_points[,2],#
			u=azimuth_raster_agg_points_u,#
			v=azimuth_raster_agg_points_v,#
			arrowfun=arrowfun,arrow.ex=arrow.ex,length=.1)
	plot(basemap)#
	arrow.plot(azimuth_raster_agg_points[,1],azimuth_raster_agg_points[,2],#
			u=azimuth_raster_agg_points_u,#
			v=azimuth_raster_agg_points_v,#
			arrowfun=arrowfun,arrow.ex=arrow.ex,length=.01)
?length
?arrows
?plot
	plot(basemap)#
	arrow.plot(azimuth_raster_agg_points[,1],azimuth_raster_agg_points[,2],#
			u=azimuth_raster_agg_points_u,#
			v=azimuth_raster_agg_points_v,#
			arrowfun=arrowfun,arrow.ex=arrow.ex,length=.01)
	plot(basemap)#
	arrow.plot(azimuth_raster_agg_points[,1],azimuth_raster_agg_points[,2],#
			u=azimuth_raster_agg_points_u,#
			v=azimuth_raster_agg_points_v,#
			arrowfun=arrowfun,arrow.ex=arrow.ex,length=.1)
#
#
plot.azimuth <- function(azimuth_raster,max_arrows_per_dim=25,na.rm=TRUE,basemap,#
		arrowfun=arrows,arrow.ex,length=.1)#
{#
	if(missing(basemap))#
	{#
		basemap=azimuth_raster#
	}#
	# Check the dimensions of the image.#
	ncol_azimuth_raster=ncol(azimuth_raster)#
	nrow_azimuth_raster=nrow(azimuth_raster)#
	#
	col_scale=ncol_azimuth_raster/max_arrows_per_dim#
	row_scale=nrow_azimuth_raster/max_arrows_per_dim#
	#
	fact=max(col_scale,row_scale)#
	#
	azimuth_raster_agg=aggregate(x=azimuth_raster,fact=fact,fun=circ.mean.na.rm)#
#
	azimuth_raster_agg_points=rasterToPoints(azimuth_raster_agg,spatial=FALSE)#
	#
	azimuth_raster_agg_points_u=sin(azimuth_raster_agg_points[,3])#
	azimuth_raster_agg_points_v=cos(azimuth_raster_agg_points[,3])#
	#
	if(missing(arrow.ex)#
	{#
		arrow.ex=1/min(nrow(azimuth_raster_agg),ncol(azimuth_raster_agg))#
	}#
	#
	plot(basemap)#
	arrow.plot(azimuth_raster_agg_points[,1],azimuth_raster_agg_points[,2],#
			u=azimuth_raster_agg_points_u,#
			v=azimuth_raster_agg_points_v,#
			arrowfun=arrowfun,arrow.ex=arrow.ex)#
}
#' Plots an azimuth raster using arrows.#
#' @examples #
#' tahoe_lidar_bareearth <- raster(system.file("external/tahoe_lidar_bareearth.tif", package="STARStools"))#
#' tahoe_lidar_bareearth_azimuth <- slopeAspect(tahoe_lidar_bareearth,out=c('aspect'),unit='radians')#
#
#
#
plot.azimuth <- function(azimuth_raster,max_arrows_per_dim=25,na.rm=TRUE,basemap,#
		arrowfun=arrows,arrow.ex,length=.1)#
{#
	if(missing(basemap))#
	{#
		basemap=azimuth_raster#
	}#
	# Check the dimensions of the image.#
	ncol_azimuth_raster=ncol(azimuth_raster)#
	nrow_azimuth_raster=nrow(azimuth_raster)#
	#
	col_scale=ncol_azimuth_raster/max_arrows_per_dim#
	row_scale=nrow_azimuth_raster/max_arrows_per_dim#
	#
	fact=max(col_scale,row_scale)#
	#
	azimuth_raster_agg=aggregate(x=azimuth_raster,fact=fact,fun=circ.mean.na.rm)#
#
	azimuth_raster_agg_points=rasterToPoints(azimuth_raster_agg,spatial=FALSE)#
	#
	azimuth_raster_agg_points_u=sin(azimuth_raster_agg_points[,3])#
	azimuth_raster_agg_points_v=cos(azimuth_raster_agg_points[,3])#
	#
	if(missing(arrow.ex)#
	{#
		arrow.ex=1/min(nrow(azimuth_raster_agg),ncol(azimuth_raster_agg))#
	}#
	#
	plot(basemap)#
	arrow.plot(azimuth_raster_agg_points[,1],azimuth_raster_agg_points[,2],#
			u=azimuth_raster_agg_points_u,#
			v=azimuth_raster_agg_points_v,#
			arrowfun=arrowfun,arrow.ex=arrow.ex)#
}
#' Plots an azimuth raster using arrows.#
#' @examples #
#' tahoe_lidar_bareearth <- raster(system.file("external/tahoe_lidar_bareearth.tif", package="STARStools"))#
#' tahoe_lidar_bareearth_azimuth <- slopeAspect(tahoe_lidar_bareearth,out=c('aspect'),unit='radians')#
#
#
#
plot.azimuth <- function(azimuth_raster,max_arrows_per_dim=25,na.rm=TRUE,basemap,#
		arrowfun=arrows,arrow.ex,length=.1)#
{#
	if(missing(basemap))#
	{#
		basemap=azimuth_raster#
	}#
	# Check the dimensions of the image.#
	ncol_azimuth_raster=ncol(azimuth_raster)#
	nrow_azimuth_raster=nrow(azimuth_raster)#
	#
	col_scale=ncol_azimuth_raster/max_arrows_per_dim#
	row_scale=nrow_azimuth_raster/max_arrows_per_dim#
	#
	fact=max(col_scale,row_scale)#
	#
	azimuth_raster_agg=aggregate(x=azimuth_raster,fact=fact,fun=circ.mean.na.rm)#
#
	azimuth_raster_agg_points=rasterToPoints(azimuth_raster_agg,spatial=FALSE)#
	#
	azimuth_raster_agg_points_u=sin(azimuth_raster_agg_points[,3])#
	azimuth_raster_agg_points_v=cos(azimuth_raster_agg_points[,3])#
	#
	if(missing(arrow.ex))#
	{#
		arrow.ex=1/min(nrow(azimuth_raster_agg),ncol(azimuth_raster_agg))#
	}#
	#
	plot(basemap)#
	arrow.plot(azimuth_raster_agg_points[,1],azimuth_raster_agg_points[,2],#
			u=azimuth_raster_agg_points_u,#
			v=azimuth_raster_agg_points_v,#
			arrowfun=arrowfun,arrow.ex=arrow.ex)#
}
plot.azimuth(azimuth_raster)
plot.azimuth(azimuth_raster)
plot.azimuth(azimuth_raster)
#' Plots an azimuth raster using arrows.#
#' @examples #
#' tahoe_lidar_bareearth <- raster(system.file("external/tahoe_lidar_bareearth.tif", package="STARStools"))#
#' tahoe_lidar_bareearth_azimuth <- slopeAspect(tahoe_lidar_bareearth,out=c('aspect'),unit='radians')#
#
#
#
plot.azimuth <- function(azimuth_raster,max_arrows_per_dim=25,na.rm=TRUE,basemap,#
		arrowfun=arrows,arrow.ex,length=.1)#
{#
	if(missing(basemap))#
	{#
		basemap=azimuth_raster#
	}#
	# Check the dimensions of the image.#
	ncol_azimuth_raster=ncol(azimuth_raster)#
	nrow_azimuth_raster=nrow(azimuth_raster)#
	#
	col_scale=ncol_azimuth_raster/max_arrows_per_dim#
	row_scale=nrow_azimuth_raster/max_arrows_per_dim#
	#
	fact=max(col_scale,row_scale)#
	#
	azimuth_raster_agg=aggregate(x=azimuth_raster,fact=fact,fun=circ.mean.na.rm)#
#
	azimuth_raster_agg_points=rasterToPoints(azimuth_raster_agg,spatial=FALSE)#
	#
	azimuth_raster_agg_points_u=sin(azimuth_raster_agg_points[,3])#
	azimuth_raster_agg_points_v=cos(azimuth_raster_agg_points[,3])#
	#
	if(missing(arrow.ex))#
	{#
		arrow.ex=1/min(nrow(azimuth_raster_agg),ncol(azimuth_raster_agg))#
	}#
	#
	plot(basemap)#
	arrow.plot(azimuth_raster_agg_points[,1],azimuth_raster_agg_points[,2],#
			u=azimuth_raster_agg_points_u,#
			v=azimuth_raster_agg_points_v,#
			arrowfun=arrowfun,arrow.ex=arrow.ex,length=length)#
}
plot.azimuth(azimuth_raster)
#' Plots an azimuth raster using arrows.#
#' @examples #
#' tahoe_lidar_bareearth <- raster(system.file("external/tahoe_lidar_bareearth.tif", package="STARStools"))#
#' tahoe_lidar_bareearth_azimuth <- slopeAspect(tahoe_lidar_bareearth,out=c('aspect'),unit='radians')#
#
#
#
plot.azimuth <- function(azimuth_raster,max_arrows_per_dim=25,na.rm=TRUE,basemap,#
		arrowfun=arrows,arrow.ex,length=.1)#
{#
	if(missing(basemap))#
	{#
		basemap=azimuth_raster#
	}#
	# Check the dimensions of the image.#
	ncol_azimuth_raster=ncol(azimuth_raster)#
	nrow_azimuth_raster=nrow(azimuth_raster)#
	#
	col_scale=ncol_azimuth_raster/max_arrows_per_dim#
	row_scale=nrow_azimuth_raster/max_arrows_per_dim#
	#
	fact=max(col_scale,row_scale)#
	#
	azimuth_raster_agg=aggregate(x=azimuth_raster,fact=fact,fun=circ.mean.na.rm)#
#
	azimuth_raster_agg_points=rasterToPoints(azimuth_raster_agg,spatial=FALSE)#
	#
	azimuth_raster_agg_points_u=sin(azimuth_raster_agg_points[,3])#
	azimuth_raster_agg_points_v=cos(azimuth_raster_agg_points[,3])#
	#
	if(missing(arrow.ex))#
	{#
		arrow.ex=1/min(nrow(azimuth_raster_agg),ncol(azimuth_raster_agg))/2#
	}#
	#
	plot(basemap)#
	arrow.plot(azimuth_raster_agg_points[,1],azimuth_raster_agg_points[,2],#
			u=azimuth_raster_agg_points_u,#
			v=azimuth_raster_agg_points_v,#
			arrowfun=arrowfun,arrow.ex=arrow.ex,length=length)#
}
plot.azimuth(azimuth_raster)
#' Plots an azimuth raster using arrows.#
#' @examples #
#' tahoe_lidar_bareearth <- raster(system.file("external/tahoe_lidar_bareearth.tif", package="STARStools"))#
#' tahoe_lidar_bareearth_azimuth <- slopeAspect(tahoe_lidar_bareearth,out=c('aspect'),unit='radians')#
#
#
#
plot.azimuth <- function(azimuth_raster,max_arrows_per_dim=25,na.rm=TRUE,basemap,#
		arrowfun=arrows,arrow.ex,length=.05)#
{#
	if(missing(basemap))#
	{#
		basemap=azimuth_raster#
	}#
	# Check the dimensions of the image.#
	ncol_azimuth_raster=ncol(azimuth_raster)#
	nrow_azimuth_raster=nrow(azimuth_raster)#
	#
	col_scale=ncol_azimuth_raster/max_arrows_per_dim#
	row_scale=nrow_azimuth_raster/max_arrows_per_dim#
	#
	fact=max(col_scale,row_scale)#
	#
	azimuth_raster_agg=aggregate(x=azimuth_raster,fact=fact,fun=circ.mean.na.rm)#
#
	azimuth_raster_agg_points=rasterToPoints(azimuth_raster_agg,spatial=FALSE)#
	#
	azimuth_raster_agg_points_u=sin(azimuth_raster_agg_points[,3])#
	azimuth_raster_agg_points_v=cos(azimuth_raster_agg_points[,3])#
	#
	if(missing(arrow.ex))#
	{#
		arrow.ex=1/min(nrow(azimuth_raster_agg),ncol(azimuth_raster_agg))/2#
	}#
	#
	plot(basemap)#
	arrow.plot(azimuth_raster_agg_points[,1],azimuth_raster_agg_points[,2],#
			u=azimuth_raster_agg_points_u,#
			v=azimuth_raster_agg_points_v,#
			arrowfun=arrowfun,arrow.ex=arrow.ex,length=length)#
}
plot.azimuth(azimuth_raster)
?arrow.plot
magnitude= tahoe_lidar_bareearth
magnitude
getMinMax(magnitude)
?setMinMax
setMinMax(magnitude
)
min(magnitude)
min_magnitude=minValue(magnitude)
magnitude
setMinMax(magnitude)
minValue(magnitude)
		magnitude=setMinMax(magnitude)#
		min_magnitude=minValue(magnitude)
min_magnitude
#' Spatially Sync Rasters#
#' #
#' Aligns ("syncs") a Raster to a reference Raster.#
#' #
#' Uses bilinear or nearest neighbor resampling to align a raster to the extent#
#' and projection of a reference raster and match the resolution of the#
#' reference raster.#
#' #
#' @param unsynced A Raster object to be aligned to the reference raster.#
#' @param reference A Raster object to be used as the reference for syncing.#
#' Syncing will use the reference's projection, resolution, and extent.#
#' @param method Method used to compute values for the new RasterLayer. Either#
#' 'ngb' (nearest neighbor) or 'bilinear' (bilinear interpolation).#
#' @param verbose verbose=TRUE gives feedback on the process (UNSUPPORTED AT#
#' PRESENT).#
#' @return Returns a RasterLayer, RasterBrick or RasterStack object synced to#
#' the reference raster object.#
#' @author Jonathan A. Greenberg#
#' @seealso \code{\link[climstats]{temporal_sync_raster}}#
#' @keywords brick/stack calculate#
#' @examples#
#' #
#' \dontrun{#
#' require(R.utils) #Can't be loaded after raster#
#' require(climstats)#
#' load(system.file("extdata/elevTahoe.RData",package="climstats"))#
#' #
#' ppt=get_climate_data("PRISM-4km-ppt", #
#' 		date_range=c("1999/1/1","1999/12/31"), standardize=TRUE, #
#' 		enable_download=TRUE, overwrite=TRUE)#
#' 		#
#' pptTahoe99=spatial_sync_raster(ppt,elevTahoe,method="bilinear")#
#' pptTahoe99#
#' ppt99jan<-raster(pptTahoe99,layer=1)#
#' plot(ppt99jan)#
#' }#
#' #
spatial_sync_raster <- function(unsynced,reference,method="ngb",verbose=FALSE)#
{#
	new_projection=projection(reference)#
	old_projection=projection(unsynced)#
	#
	new_res=res(reference)#
	old_res=res(unsynced)#
	#
	if(new_projection!=old_projection | new_res[1] != old_res[1] | new_res[2] != old_res[2])#
	{#
		pr_extent=projectExtent(unsynced, new_projection)#
		# We need to fix the extent#
		pr_extent <- setExtent(pr_extent,extent(reference))#
		res(pr_extent)=res(reference)#
		if(new_projection!=old_projection)#
		{#
			pr <- projectRaster(unsynced, pr_extent,method=method)#
		} else#
		{#
			pr <- raster::resample(unsynced, pr_extent,method=method)#
		}#
	} else#
	{#
		pr=unsynced#
	}#
	#
	expanded_raster=expand(pr,reference)#
	synced_raster=crop(expanded_raster,reference)#
#
#
	# This in theory shouldn't be neccessary...#
	extent(synced_raster)=extent(reference)#
	#
	return(synced_raster)#
	#
}
?arrow.plot
#' Spatially Sync Rasters#
#' #
#' Aligns ("syncs") a Raster to a reference Raster.#
#' #
#' Uses bilinear or nearest neighbor resampling to align a raster to the extent#
#' and projection of a reference raster and match the resolution of the#
#' reference raster.#
#' #
#' @param unsynced A Raster object to be aligned to the reference raster.#
#' @param reference A Raster object to be used as the reference for syncing.#
#' Syncing will use the reference's projection, resolution, and extent.#
#' @param method Method used to compute values for the new RasterLayer. Either#
#' 'ngb' (nearest neighbor) or 'bilinear' (bilinear interpolation).#
#' @param verbose verbose=TRUE gives feedback on the process (UNSUPPORTED AT#
#' PRESENT).#
#' @return Returns a RasterLayer, RasterBrick or RasterStack object synced to#
#' the reference raster object.#
#' @author Jonathan A. Greenberg#
#' @seealso \code{\link[climstats]{temporal_sync_raster}}#
#' @keywords brick/stack calculate#
#' @examples#
#' #
#' \dontrun{#
#' require(R.utils) #Can't be loaded after raster#
#' require(climstats)#
#' load(system.file("extdata/elevTahoe.RData",package="climstats"))#
#' #
#' ppt=get_climate_data("PRISM-4km-ppt", #
#' 		date_range=c("1999/1/1","1999/12/31"), standardize=TRUE, #
#' 		enable_download=TRUE, overwrite=TRUE)#
#' 		#
#' pptTahoe99=spatial_sync_raster(ppt,elevTahoe,method="bilinear")#
#' pptTahoe99#
#' ppt99jan<-raster(pptTahoe99,layer=1)#
#' plot(ppt99jan)#
#' }#
#' #
spatial_sync_raster <- function(unsynced,reference,method="ngb",verbose=FALSE)#
{#
	new_projection=projection(reference)#
	old_projection=projection(unsynced)#
	#
	new_res=res(reference)#
	old_res=res(unsynced)#
	#
	if(new_projection!=old_projection | new_res[1] != old_res[1] | new_res[2] != old_res[2])#
	{#
		pr_extent=projectExtent(unsynced, new_projection)#
		# We need to fix the extent#
		pr_extent <- setExtent(pr_extent,extent(reference))#
		res(pr_extent)=res(reference)#
		if(new_projection!=old_projection)#
		{#
			pr <- projectRaster(unsynced, pr_extent,method=method)#
		} else#
		{#
			pr <- raster::resample(unsynced, pr_extent,method=method)#
		}#
	} else#
	{#
		pr=unsynced#
	}#
	#
	expanded_raster=expand(pr,reference)#
	synced_raster=crop(expanded_raster,reference)#
#
#
	# This in theory shouldn't be neccessary...#
	extent(synced_raster)=extent(reference)#
	#
	return(synced_raster)#
	#
}
spatial_sync_raster(azimuth_raster_agg,magnitude)
azimuth_raster
azimuth_raster_agg
?aggregate
?regularSample
? sampleRegular
?extract
magnitude_raster=tahoe_lidar_bareearth
magnitude_raster
		magnitude_raster_agg=aggregate(x=magnitude_raster,fact=fact,fun=mean)
magnitude_raster_agg
		min_magnitude=minValue(magnitude)#
		max_magnitude=maxValue(magnitude)
min_magnitude
max_magnitude
magnitude_raster_agg_points=rasterToPoints(magnitude_raster_agg,spatial=FALSE)
magnitude_raster_agg_points
magnitude_raster_agg_points[,3]
		magnitude_raster_agg_points_normalized=#
				(magnitude_raster_agg_points[,3]-min_magnitude)/(max_magnitude-min_magnitude)
magnitude_raster_agg_points_normalized
magnitude_stetch=c(.2,.8)
		azimuth_raster_agg_points_u=sin(magnitude_raster_agg_points_normalized)#
		azimuth_raster_agg_points_v=cos(magnitude_raster_agg_points_normalized)
if(missing(arrow.ex))#
	{#
		arrow.ex=1/min(nrow(azimuth_raster_agg),ncol(azimuth_raster_agg))/2#
	}#
	#
	plot(basemap)#
	arrow.plot(azimuth_raster_agg_points[,1],azimuth_raster_agg_points[,2],#
			u=azimuth_raster_agg_points_u,#
			v=azimuth_raster_agg_points_v,#
			arrowfun=arrowfun,arrow.ex=arrow.ex,length=length)
length
length=0.5
length=0.05
	plot(basemap)#
	arrow.plot(azimuth_raster_agg_points[,1],azimuth_raster_agg_points[,2],#
			u=azimuth_raster_agg_points_u,#
			v=azimuth_raster_agg_points_v,#
			arrowfun=arrowfun,arrow.ex=arrow.ex,length=length)
azimuth_raster_agg_points_u=sin(azimuth_raster_agg_points[,3])*magnitude_raster_agg_points_normalized#
		azimuth_raster_agg_points_v=cos(azimuth_raster_agg_points[,3])*magnitude_raster_agg_points_normalized
	#
	plot(basemap)#
	arrow.plot(azimuth_raster_agg_points[,1],azimuth_raster_agg_points[,2],#
			u=azimuth_raster_agg_points_u,#
			v=azimuth_raster_agg_points_v,#
			arrowfun=arrowfun,arrow.ex=arrow.ex,length=length)
?pdf
getwd()
pdf(file="/Users/jonathan/Documents/test_aziplot.pdf")
	#
	plot(basemap)#
	arrow.plot(azimuth_raster_agg_points[,1],azimuth_raster_agg_points[,2],#
			u=azimuth_raster_agg_points_u,#
			v=azimuth_raster_agg_points_v,#
			arrowfun=arrowfun,arrow.ex=arrow.ex,length=length)
dev.off()
basemap=magnitude
basemap=magnitude
basemap=magnitude
	plot(basemap)#
	arrow.plot(azimuth_raster_agg_points[,1],azimuth_raster_agg_points[,2],#
			u=azimuth_raster_agg_points_u,#
			v=azimuth_raster_agg_points_v,#
			arrowfun=arrowfun,arrow.ex=arrow.ex,length=length)
magnitude_stetch[1]
magnitude_raster_agg_points_normalized=(magnitude_stetch[2]-magnitude_stetch[1])/(#
				(magnitude_raster_agg_points[,3]-min_magnitude)/(max_magnitude-min_magnitude))-magnitude_stetch[1]
magnitude_raster_agg_points_normalized
magnitude_raster_agg_points_normalized=(magnitude_stetch[2]-magnitude_stetch[1])*(#
				(magnitude_raster_agg_points[,3]-min_magnitude)/(max_magnitude-min_magnitude))-magnitude_stetch[1]
magnitude_raster_agg_points_normalized
(magnitude_stetch[2]-magnitude_stetch[1])
magnitude_raster_agg_points_normalized=(magnitude_stetch[2]-magnitude_stetch[1])*(#
				(magnitude_raster_agg_points[,3]-min_magnitude)/(max_magnitude-min_magnitude))+magnitude_stetch[1]
(magnitude_stetch[2]-magnitude_stetch[1])
magnitude_raster_agg_points_normalized
	azimuth_raster_agg_points_u=sin(azimuth_raster_agg_points[,3])*magnitude_raster_agg_points_normalized#
		azimuth_raster_agg_points_v=cos(azimuth_raster_agg_points[,3])*magnitude_raster_agg_points_normalized
	plot(basemap)#
	arrow.plot(azimuth_raster_agg_points[,1],azimuth_raster_agg_points[,2],#
			u=azimuth_raster_agg_points_u,#
			v=azimuth_raster_agg_points_v,#
			arrowfun=arrowfun,arrow.ex=arrow.ex,length=length)
		azimuth_raster_agg_points_u=sin(azimuth_raster_agg_points[,3])*(magnitude_raster_agg_points_normalized/2)#
		azimuth_raster_agg_points_v=cos(azimuth_raster_agg_points[,3])*(magnitude_raster_agg_points_normalized/2)
	plot(basemap)#
	arrow.plot(azimuth_raster_agg_points[,1],azimuth_raster_agg_points[,2],#
			u=azimuth_raster_agg_points_u,#
			v=azimuth_raster_agg_points_v,#
			arrowfun=arrowfun,arrow.ex=arrow.ex,length=length)
	magnitude_raster_agg_points_normalized=(magnitude_stetch[2]-magnitude_stetch[1])*(#
				(magnitude_raster_agg_points[,3]-min_magnitude)/(max_magnitude-min_magnitude))+magnitude_stetch[1]#
		azimuth_raster_agg_points_u=sin(azimuth_raster_agg_points[,3])*(magnitude_raster_agg_points_normalized/2)#
		azimuth_raster_agg_points_v=cos(azimuth_raster_agg_points[,3])*(magnitude_raster_agg_points_normalized/2)
azimuth_raster_agg_points_u
	plot(basemap)#
	arrow.plot(azimuth_raster_agg_points[,1],azimuth_raster_agg_points[,2],#
			u=azimuth_raster_agg_points_u,#
			v=azimuth_raster_agg_points_v,#
			arrowfun=arrowfun,arrow.ex=arrow.ex,length=length)
?arrow.plot
		arrow.ex=1/min(nrow(azimuth_raster_agg),ncol(azimuth_raster_agg))/4
	plot(basemap)#
	arrow.plot(azimuth_raster_agg_points[,1],azimuth_raster_agg_points[,2],#
			u=azimuth_raster_agg_points_u,#
			v=azimuth_raster_agg_points_v,#
			arrowfun=arrowfun,arrow.ex=arrow.ex,length=length)
#' Plots an azimuth raster using arrows.#
#' @examples #
#' tahoe_lidar_bareearth <- raster(system.file("external/tahoe_lidar_bareearth.tif", package="STARStools"))#
#' tahoe_lidar_bareearth_azimuth <- slopeAspect(tahoe_lidar_bareearth,out=c('aspect'),unit='radians')#
#
#
#
plot.azimuth <- function(azimuth_raster,max_arrows_per_dim=25,na.rm=TRUE,basemap,#
		arrowfun=arrows,arrow.ex,length=.05,magnitude_raster,magnitude_stetch=c(.2,.8))#
{#
	if(missing(basemap))#
	{#
		basemap=azimuth_raster#
	}#
	# Check the dimensions of the image.#
	ncol_azimuth_raster=ncol(azimuth_raster)#
	nrow_azimuth_raster=nrow(azimuth_raster)#
	#
	col_scale=ncol_azimuth_raster/max_arrows_per_dim#
	row_scale=nrow_azimuth_raster/max_arrows_per_dim#
	#
	fact=max(col_scale,row_scale)#
	#
	# These needs to be fixed, since this really slows this down.#
	#
	azimuth_raster_agg=aggregate(x=azimuth_raster,fact=fact,fun=circ.mean.na.rm)#
#
	azimuth_raster_agg_points=rasterToPoints(azimuth_raster_agg,spatial=FALSE)#
	#
	if(missing(magnitude))#
	{#
		azimuth_raster_agg_points_u=sin(azimuth_raster_agg_points[,3])#
		azimuth_raster_agg_points_v=cos(azimuth_raster_agg_points[,3])#
	} else#
	{#
		# Right now, we are assuming magnitude_raster is the same dimension as azimuth_raster#
#		magnitude_agg=spatial_sync_raster(magnitude,azimuth_raster_agg,method="ngb")#
		magnitude_raster_agg=aggregate(x=magnitude_raster,fact=fact,fun=mean)#
		magnitude=setMinMax(magnitude)#
		min_magnitude=minValue(magnitude)#
		max_magnitude=maxValue(magnitude)#
		magnitude_raster_agg_points=rasterToPoints(magnitude_raster_agg,spatial=FALSE)#
		magnitude_raster_agg_points_normalized=(magnitude_stetch[2]-magnitude_stetch[1])*(#
				(magnitude_raster_agg_points[,3]-min_magnitude)/(max_magnitude-min_magnitude))+magnitude_stetch[1]#
		azimuth_raster_agg_points_u=sin(azimuth_raster_agg_points[,3])*(magnitude_raster_agg_points_normalized/2)#
		azimuth_raster_agg_points_v=cos(azimuth_raster_agg_points[,3])*(magnitude_raster_agg_points_normalized/2)	#
	}#
	#
	#
	#
	if(missing(arrow.ex))#
	{#
		arrow.ex=1/min(nrow(azimuth_raster_agg),ncol(azimuth_raster_agg))/2#
	}#
	#
	plot(basemap)#
	arrow.plot(azimuth_raster_agg_points[,1],azimuth_raster_agg_points[,2],#
			u=azimuth_raster_agg_points_u,#
			v=azimuth_raster_agg_points_v,#
			arrowfun=arrowfun,arrow.ex=arrow.ex,length=length)#
}
plot.azimuth(azimuth_raster,max_arrows_per_dim=10,na.rm=TRUE,basemap,#
		arrowfun=arrows,arrow.ex,length=.05,magnitude_raster,magnitude_stetch=c(.2,.8))
magnitude_raster
#' Plots an azimuth raster using arrows.#
#' @examples #
#' tahoe_lidar_bareearth <- raster(system.file("external/tahoe_lidar_bareearth.tif", package="STARStools"))#
#' tahoe_lidar_bareearth_azimuth <- slopeAspect(tahoe_lidar_bareearth,out=c('aspect'),unit='radians')#
#
#
#
plot.azimuth <- function(azimuth_raster,max_arrows_per_dim=25,na.rm=TRUE,basemap,#
		arrowfun=arrows,arrow.ex,length=.05,magnitude_raster,magnitude_stetch=c(.2,.8))#
{#
	if(missing(basemap))#
	{#
		basemap=azimuth_raster#
	}#
	# Check the dimensions of the image.#
	ncol_azimuth_raster=ncol(azimuth_raster)#
	nrow_azimuth_raster=nrow(azimuth_raster)#
	#
	col_scale=ncol_azimuth_raster/max_arrows_per_dim#
	row_scale=nrow_azimuth_raster/max_arrows_per_dim#
	#
	fact=max(col_scale,row_scale)#
	#
	# These needs to be fixed, since this really slows this down.#
	#
	azimuth_raster_agg=aggregate(x=azimuth_raster,fact=fact,fun=circ.mean.na.rm)#
#
	azimuth_raster_agg_points=rasterToPoints(azimuth_raster_agg,spatial=FALSE)#
	#
	if(missing(magnitude_raster))#
	{#
		azimuth_raster_agg_points_u=sin(azimuth_raster_agg_points[,3])#
		azimuth_raster_agg_points_v=cos(azimuth_raster_agg_points[,3])#
	} else#
	{#
		# Right now, we are assuming magnitude_raster is the same dimension as azimuth_raster#
#		magnitude_agg=spatial_sync_raster(magnitude,azimuth_raster_agg,method="ngb")#
		magnitude_raster_agg=aggregate(x=magnitude_raster,fact=fact,fun=mean)#
		magnitude=setMinMax(magnitude)#
		min_magnitude=minValue(magnitude)#
		max_magnitude=maxValue(magnitude)#
		magnitude_raster_agg_points=rasterToPoints(magnitude_raster_agg,spatial=FALSE)#
		magnitude_raster_agg_points_normalized=(magnitude_stetch[2]-magnitude_stetch[1])*(#
				(magnitude_raster_agg_points[,3]-min_magnitude)/(max_magnitude-min_magnitude))+magnitude_stetch[1]#
		azimuth_raster_agg_points_u=sin(azimuth_raster_agg_points[,3])*(magnitude_raster_agg_points_normalized/2)#
		azimuth_raster_agg_points_v=cos(azimuth_raster_agg_points[,3])*(magnitude_raster_agg_points_normalized/2)	#
	}#
	#
	#
	#
	if(missing(arrow.ex))#
	{#
		arrow.ex=1/min(nrow(azimuth_raster_agg),ncol(azimuth_raster_agg))/2#
	}#
	#
	plot(basemap)#
	arrow.plot(azimuth_raster_agg_points[,1],azimuth_raster_agg_points[,2],#
			u=azimuth_raster_agg_points_u,#
			v=azimuth_raster_agg_points_v,#
			arrowfun=arrowfun,arrow.ex=arrow.ex,length=length)#
}
plot.azimuth(azimuth_raster,max_arrows_per_dim=10,na.rm=TRUE,basemap,#
		arrowfun=arrows,arrow.ex,length=.05,magnitude_raster,magnitude_stetch=c(.2,.8))
max_arrows_per_dim
#' Plots an azimuth raster using arrows.#
#' @examples #
#' tahoe_lidar_bareearth <- raster(system.file("external/tahoe_lidar_bareearth.tif", package="STARStools"))#
#' tahoe_lidar_bareearth_azimuth <- slopeAspect(tahoe_lidar_bareearth,out=c('aspect'),unit='radians')#
#
#
#
plot.azimuth <- function(azimuth_raster,max_arrows_per_dim=25,na.rm=TRUE,basemap,#
		arrowfun=arrows,arrow.ex,length=.05,magnitude_raster,magnitude_stetch=c(.2,.8))#
{#
	if(missing(basemap))#
	{#
		basemap=azimuth_raster#
	}#
	# Check the dimensions of the image.#
	ncol_azimuth_raster=ncol(azimuth_raster)#
	nrow_azimuth_raster=nrow(azimuth_raster)#
	#
	col_scale=ncol_azimuth_raster/max_arrows_per_dim#
	row_scale=nrow_azimuth_raster/max_arrows_per_dim#
	#
	fact=max(col_scale,row_scale)#
	#
	# These needs to be fixed, since this really slows this down.#
	#
	azimuth_raster_agg=aggregate(x=azimuth_raster,fact=fact,fun=circ.mean.na.rm)#
#
	azimuth_raster_agg_points=rasterToPoints(azimuth_raster_agg,spatial=FALSE)#
	#
	if(missing(magnitude_raster))#
	{#
		azimuth_raster_agg_points_u=sin(azimuth_raster_agg_points[,3])#
		azimuth_raster_agg_points_v=cos(azimuth_raster_agg_points[,3])#
	} else#
	{#
		# Right now, we are assuming magnitude_raster is the same dimension as azimuth_raster#
#		magnitude_agg=spatial_sync_raster(magnitude,azimuth_raster_agg,method="ngb")#
		magnitude_raster_agg=aggregate(x=magnitude_raster,fact=fact,fun=mean)#
		magnitude=setMinMax(magnitude)#
		min_magnitude=minValue(magnitude)#
		max_magnitude=maxValue(magnitude)#
		magnitude_raster_agg_points=rasterToPoints(magnitude_raster_agg,spatial=FALSE)#
		magnitude_raster_agg_points_normalized=(magnitude_stetch[2]-magnitude_stetch[1])*(#
				(magnitude_raster_agg_points[,3]-min_magnitude)/(max_magnitude-min_magnitude))+magnitude_stetch[1]#
		azimuth_raster_agg_points_u=sin(azimuth_raster_agg_points[,3])*(magnitude_raster_agg_points_normalized/2)#
		azimuth_raster_agg_points_v=cos(azimuth_raster_agg_points[,3])*(magnitude_raster_agg_points_normalized/2)	#
	}#
	#
	#
	#
	if(missing(arrow.ex))#
	{#
		arrow.ex=1/min(nrow(azimuth_raster_agg),ncol(azimuth_raster_agg))#
	}#
	#
	plot(basemap)#
	arrow.plot(azimuth_raster_agg_points[,1],azimuth_raster_agg_points[,2],#
			u=azimuth_raster_agg_points_u,#
			v=azimuth_raster_agg_points_v,#
			arrowfun=arrowfun,arrow.ex=arrow.ex,length=length)#
}
plot.azimuth(azimuth_raster,max_arrows_per_dim=10,na.rm=TRUE,basemap,#
		arrowfun=arrows,arrow.ex,length=.05,magnitude_raster,magnitude_stetch=c(.2,.8))
plot.azimuth(azimuth_raster,max_arrows_per_dim=25,na.rm=TRUE,basemap,#
		arrowfun=arrows,arrow.ex,length=.05,magnitude_raster,magnitude_stetch=c(.2,.8))
plot.azimuth(azimuth_raster,max_arrows_per_dim=25,na.rm=TRUE,basemap,#
		arrowfun=arrows,arrow.ex,length=.05,magnitude_raster,magnitude_stetch=c(0,1))
plot.azimuth(azimuth_raster,max_arrows_per_dim=25,na.rm=TRUE,basemap,#
		arrowfun=arrows,arrow.ex,length=.05,magnitude_raster,magnitude_stetch=c(.2,.8))
plot.azimuth(azimuth_raster,max_arrows_per_dim=25,na.rm=TRUE,basemap,#
		arrowfun=arrows,length=.05,magnitude_raster,magnitude_stetch=c(.2,.8))
#' Plots an azimuth raster using arrows.#
#' @examples #
#' tahoe_lidar_bareearth <- raster(system.file("external/tahoe_lidar_bareearth.tif", package="STARStools"))#
#' tahoe_lidar_bareearth_azimuth <- slopeAspect(tahoe_lidar_bareearth,out=c('aspect'),unit='radians')#
#
#
#
plot.azimuth <- function(azimuth_raster,max_arrows_per_dim=25,na.rm=TRUE,basemap,#
		arrowfun=arrows,arrow.ex,length=.05,magnitude_raster,magnitude_stetch=c(.2,.8))#
{#
	if(missing(basemap))#
	{#
		basemap=azimuth_raster#
	}#
	# Check the dimensions of the image.#
	ncol_azimuth_raster=ncol(azimuth_raster)#
	nrow_azimuth_raster=nrow(azimuth_raster)#
	#
	col_scale=ncol_azimuth_raster/max_arrows_per_dim#
	row_scale=nrow_azimuth_raster/max_arrows_per_dim#
	#
	fact=max(col_scale,row_scale)#
	#
	# These needs to be fixed, since this really slows this down.#
	#
	azimuth_raster_agg=aggregate(x=azimuth_raster,fact=fact,fun=circ.mean.na.rm)#
#
	azimuth_raster_agg_points=rasterToPoints(azimuth_raster_agg,spatial=FALSE)#
	#
	if(missing(magnitude_raster))#
	{#
		azimuth_raster_agg_points_u=sin(azimuth_raster_agg_points[,3])#
		azimuth_raster_agg_points_v=cos(azimuth_raster_agg_points[,3])#
	} else#
	{#
		# Right now, we are assuming magnitude_raster is the same dimension as azimuth_raster#
#		magnitude_agg=spatial_sync_raster(magnitude,azimuth_raster_agg,method="ngb")#
		magnitude_raster_agg=aggregate(x=magnitude_raster,fact=fact,fun=mean)#
		magnitude=setMinMax(magnitude)#
		min_magnitude=minValue(magnitude)#
		max_magnitude=maxValue(magnitude)#
		magnitude_raster_agg_points=rasterToPoints(magnitude_raster_agg,spatial=FALSE)#
		magnitude_raster_agg_points_normalized=(magnitude_stetch[2]-magnitude_stetch[1])*(#
				(magnitude_raster_agg_points[,3]-min_magnitude)/(max_magnitude-min_magnitude))+magnitude_stetch[1]#
		azimuth_raster_agg_points_u=sin(azimuth_raster_agg_points[,3])*(magnitude_raster_agg_points_normalized/2)#
		azimuth_raster_agg_points_v=cos(azimuth_raster_agg_points[,3])*(magnitude_raster_agg_points_normalized/2)	#
	}#
	#
	if(missing(arrow.ex))#
	{#
		arrow.ex=1/min(nrow(azimuth_raster_agg),ncol(azimuth_raster_agg))/2#
		print(arrow.ex)#
	}#
	#
	plot(basemap)#
	arrow.plot(azimuth_raster_agg_points[,1],azimuth_raster_agg_points[,2],#
			u=azimuth_raster_agg_points_u,#
			v=azimuth_raster_agg_points_v,#
			arrowfun=arrowfun,arrow.ex=arrow.ex,length=length)#
}
plot.azimuth(azimuth_raster,max_arrows_per_dim=25,na.rm=TRUE,basemap,#
		arrowfun=arrows,length=.05,magnitude_raster,magnitude_stetch=c(.2,.8))
plot.azimuth(azimuth_raster,max_arrows_per_dim=25,na.rm=TRUE,basemap,length=.05,magnitude_raster,magnitude_stetch=c(.2,.8))
plot.azimuth(azimuth_raster,max_arrows_per_dim=10,na.rm=TRUE,basemap,length=.05,magnitude_raster,magnitude_stetch=c(.2,.8))
plot.azimuth(azimuth_raster,max_arrows_per_dim=100,na.rm=TRUE,basemap,length=.05,magnitude_raster,magnitude_stetch=c(.2,.8))
plot.azimuth(azimuth_raster,max_arrows_per_dim=50,na.rm=TRUE,basemap,length=.05,magnitude_raster,magnitude_stetch=c(.2,.8))
plot.azimuth(azimuth_raster,max_arrows_per_dim=25,na.rm=TRUE,basemap,length=.05,magnitude_raster,magnitude_stetch=c(.0,1))
plot.azimuth(azimuth_raster,max_arrows_per_dim=25,na.rm=TRUE,basemap,length=.05,magnitude_raster,magnitude_stetch=c(0,1))
plot.azimuth(azimuth_raster,max_arrows_per_dim=10,na.rm=TRUE,basemap,length=.05,magnitude_raster,magnitude_stetch=c(0,1))
#' Plots an azimuth raster using arrows.#
#' @examples #
#' tahoe_lidar_bareearth <- raster(system.file("external/tahoe_lidar_bareearth.tif", package="STARStools"))#
#' tahoe_lidar_bareearth_azimuth <- slopeAspect(tahoe_lidar_bareearth,out=c('aspect'),unit='radians')#
#
#
#
plot.azimuth <- function(azimuth_raster,max_arrows_per_dim=25,na.rm=TRUE,basemap,#
		arrowfun=arrows,arrow.ex,length=.05,magnitude_raster,magnitude_stetch=c(.2,.8))#
{#
	if(missing(basemap))#
	{#
		basemap=azimuth_raster#
	}#
	# Check the dimensions of the image.#
	ncol_azimuth_raster=ncol(azimuth_raster)#
	nrow_azimuth_raster=nrow(azimuth_raster)#
	#
	col_scale=ncol_azimuth_raster/max_arrows_per_dim#
	row_scale=nrow_azimuth_raster/max_arrows_per_dim#
	#
	fact=max(col_scale,row_scale)#
	#
	# These needs to be fixed, since this really slows this down.#
	#
	azimuth_raster_agg=aggregate(x=azimuth_raster,fact=fact,fun=circ.mean.na.rm)#
#
	azimuth_raster_agg_points=rasterToPoints(azimuth_raster_agg,spatial=FALSE)#
	#
	if(missing(magnitude_raster))#
	{#
		azimuth_raster_agg_points_u=sin(azimuth_raster_agg_points[,3])#
		azimuth_raster_agg_points_v=cos(azimuth_raster_agg_points[,3])#
	} else#
	{#
		print(magnitude_raster)#
		# Right now, we are assuming magnitude_raster is the same dimension as azimuth_raster#
#		magnitude_agg=spatial_sync_raster(magnitude,azimuth_raster_agg,method="ngb")#
		magnitude_raster_agg=aggregate(x=magnitude_raster,fact=fact,fun=mean)#
		magnitude=setMinMax(magnitude)#
		min_magnitude=minValue(magnitude)#
		max_magnitude=maxValue(magnitude)#
		magnitude_raster_agg_points=rasterToPoints(magnitude_raster_agg,spatial=FALSE)#
		magnitude_raster_agg_points_normalized=(magnitude_stetch[2]-magnitude_stetch[1])*(#
				(magnitude_raster_agg_points[,3]-min_magnitude)/(max_magnitude-min_magnitude))+magnitude_stetch[1]#
		azimuth_raster_agg_points_u=sin(azimuth_raster_agg_points[,3])*(magnitude_raster_agg_points_normalized/2)#
		azimuth_raster_agg_points_v=cos(azimuth_raster_agg_points[,3])*(magnitude_raster_agg_points_normalized/2)	#
	}#
	#
	if(missing(arrow.ex))#
	{#
		arrow.ex=1/min(nrow(azimuth_raster_agg),ncol(azimuth_raster_agg))/2#
	}#
	#
	plot(basemap)#
	arrow.plot(azimuth_raster_agg_points[,1],azimuth_raster_agg_points[,2],#
			u=azimuth_raster_agg_points_u,#
			v=azimuth_raster_agg_points_v,#
			arrowfun=arrowfun,arrow.ex=arrow.ex,length=length)#
}
plot.azimuth(azimuth_raster,max_arrows_per_dim=10,na.rm=TRUE,basemap,length=.05,magnitude_raster,magnitude_stetch=c(0,1))
plot.azimuth(azimuth_raster,max_arrows_per_dim=10,na.rm=TRUE,basemap,length=.05,magnitude_raster=tahoe_lidar_bareearth,magnitude_stetch=c(0,1))
plot.azimuth(azimuth_raster,max_arrows_per_dim=25,na.rm=TRUE,basemap,length=.05,magnitude_raster=tahoe_lidar_bareearth,magnitude_stetch=c(0,1))
#' Plots an azimuth raster using arrows.#
#' @examples #
#' tahoe_lidar_bareearth <- raster(system.file("external/tahoe_lidar_bareearth.tif", package="STARStools"))#
#' tahoe_lidar_bareearth_azimuth <- slopeAspect(tahoe_lidar_bareearth,out=c('aspect'),unit='radians')#
#
#
#
plot.azimuth <- function(azimuth_raster,max_arrows_per_dim=25,na.rm=TRUE,basemap,#
		arrowfun=arrows,arrow.ex,length=.05,magnitude_raster,magnitude_stetch=c(.2,.8))#
{#
	if(missing(basemap))#
	{#
		basemap=azimuth_raster#
	}#
	# Check the dimensions of the image.#
	ncol_azimuth_raster=ncol(azimuth_raster)#
	nrow_azimuth_raster=nrow(azimuth_raster)#
	#
	col_scale=ncol_azimuth_raster/max_arrows_per_dim#
	row_scale=nrow_azimuth_raster/max_arrows_per_dim#
	#
	fact=max(col_scale,row_scale)#
	#
	# These needs to be fixed, since this really slows this down.#
	#
	azimuth_raster_agg=aggregate(x=azimuth_raster,fact=fact,fun=circ.mean.na.rm)#
#
	azimuth_raster_agg_points=rasterToPoints(azimuth_raster_agg,spatial=FALSE)#
	#
	if(missing(magnitude_raster))#
	{#
		azimuth_raster_agg_points_u=sin(azimuth_raster_agg_points[,3])#
		azimuth_raster_agg_points_v=cos(azimuth_raster_agg_points[,3])#
	} else#
	{#
		# Right now, we are assuming magnitude_raster is the same dimension as azimuth_raster#
#		magnitude_agg=spatial_sync_raster(magnitude,azimuth_raster_agg,method="ngb")#
		magnitude_raster_agg=aggregate(x=magnitude_raster,fact=fact,fun=mean)#
		magnitude=setMinMax(magnitude)#
		min_magnitude=minValue(magnitude)#
		max_magnitude=maxValue(magnitude)#
		magnitude_raster_agg_points=rasterToPoints(magnitude_raster_agg,spatial=FALSE)#
		magnitude_raster_agg_points_normalized=(magnitude_stetch[2]-magnitude_stetch[1])*(#
				(magnitude_raster_agg_points[,3]-min_magnitude)/(max_magnitude-min_magnitude))+magnitude_stetch[1]#
		azimuth_raster_agg_points_u=sin(azimuth_raster_agg_points[,3])*(magnitude_raster_agg_points_normalized/2)#
		azimuth_raster_agg_points_v=cos(azimuth_raster_agg_points[,3])*(magnitude_raster_agg_points_normalized/2)	#
	}#
	#
	if(missing(arrow.ex))#
	{#
		arrow.ex=1/min(nrow(azimuth_raster_agg),ncol(azimuth_raster_agg))#
	}#
	#
	plot(basemap)#
	arrow.plot(azimuth_raster_agg_points[,1],azimuth_raster_agg_points[,2],#
			u=azimuth_raster_agg_points_u,#
			v=azimuth_raster_agg_points_v,#
			arrowfun=arrowfun,arrow.ex=arrow.ex,length=length)#
}
plot.azimuth(azimuth_raster,max_arrows_per_dim=25,na.rm=TRUE,basemap,length=.05,magnitude_raster=tahoe_lidar_bareearth,magnitude_stetch=c(0,1))
plot.azimuth(azimuth_raster,max_arrows_per_dim=25,na.rm=TRUE,basemap,length=.05,magnitude_raster=tahoe_lidar_bareearth,magnitude_stetch=c(0.2,.8))
plot.azimuth(azimuth_raster,max_arrows_per_dim=25,na.rm=TRUE,basemap,length=.05,magnitude_raster=tahoe_lidar_bareearth,magnitude_stetch=c(0,1.1))
plot.azimuth(azimuth_raster,max_arrows_per_dim=25,na.rm=TRUE,basemap,length=.05,magnitude_raster=tahoe_lidar_bareearth,magnitude_stetch=c(0,1.2))
plot.azimuth(azimuth_raster,max_arrows_per_dim=25,na.rm=TRUE,basemap,length=.05,magnitude_raster=tahoe_lidar_bareearth,magnitude_stetch=c(0,1.4))
plot.azimuth(azimuth_raster,max_arrows_per_dim=25,na.rm=TRUE,basemap,length=.05,magnitude_raster=tahoe_lidar_bareearth,magnitude_stetch=c(0,1))
?resample
azimuth_raster_extent=extent(azimuth_raster)
res(azimuth_raster)*fact
res(azimuth_raster)
		azimuth_raster_extent=extent(azimuth_raster)#
		new_res=res(azimuth_raster)*fact#
		res(azimuth_raster_extent)=new_res#
		azimuth_raster_agg=raster::resample(azimuth_raster, azimuth_raster_extent,method="ngb")
azimuth_raster_extent=extent(azimuth_raster)
azimuth_raster_extent
?projectExtent
azimuth_raster_extent=projecExtent(azimuth_raster)
azimuth_raster_extent=projectExtent(azimuth_raster)
?projectExtent
azimuth_raster_extent=projectExtent(azim
)
?resample
azimuth_raster_extent=projectExtent(azimuth_raster,projection(azimuth_raster))
azimuth_raster_extent
new_res=res(azimuth_raster)*fact#
		res(azimuth_raster_extent)=new_res#
		azimuth_raster_agg=raster::resample(azimuth_raster, azimuth_raster_extent,method="ngb")
azimuth_raster_agg
#' Plots an azimuth raster using arrows.#
#' @examples #
#' tahoe_lidar_bareearth <- raster(system.file("external/tahoe_lidar_bareearth.tif", package="STARStools"))#
#' tahoe_lidar_bareearth_azimuth <- slopeAspect(tahoe_lidar_bareearth,out=c('aspect'),unit='radians')#
#
#
#
plot.azimuth <- function(azimuth_raster,max_arrows_per_dim=25,na.rm=TRUE,basemap,#
		arrowfun=arrows,arrow.ex,length=.05,magnitude_raster,magnitude_stetch=c(.2,.8),#
		azimuth_raster_aggregate_method="ngb",magnitude_raster_aggregate_method)#
{#
	if(missing(basemap))#
	{#
		basemap=azimuth_raster#
	}#
	# Check the dimensions of the image.#
	ncol_azimuth_raster=ncol(azimuth_raster)#
	nrow_azimuth_raster=nrow(azimuth_raster)#
	#
	col_scale=ncol_azimuth_raster/max_arrows_per_dim#
	row_scale=nrow_azimuth_raster/max_arrows_per_dim#
	#
	fact=max(col_scale,row_scale)#
	#
	# These needs to be fixed, since this really slows this down.#
	if(azimuth_raster_aggregate_method=="ngb")#
	{#
		azimuth_raster_extent=projectExtent(azimuth_raster,projection(azimuth_raster))#
		new_res=res(azimuth_raster)*fact#
		res(azimuth_raster_extent)=new_res#
		azimuth_raster_agg=raster::resample(azimuth_raster, azimuth_raster_extent,method="ngb")#
	} else#
	{#
		azimuth_raster_agg=aggregate(x=azimuth_raster,fact=fact,fun=circ.mean.na.rm)#
	}#
	#
	azimuth_raster_agg_points=rasterToPoints(azimuth_raster_agg,spatial=FALSE)#
	#
	if(missing(magnitude_raster))#
	{#
		azimuth_raster_agg_points_u=sin(azimuth_raster_agg_points[,3])#
		azimuth_raster_agg_points_v=cos(azimuth_raster_agg_points[,3])#
	} else#
	{#
		if(azimuth_raster_aggregate_method=="ngb")#
		{#
			magnitude_raster_extent=projectExtent(magnitude_raster,projection(magnitude_raster))#
			new_res=res(magnitude_raster)*fact#
			res(magnitude_raster_extent)=new_res#
			magnitude_raster_agg=raster::resample(magnitude_raster, magnitude_raster_extent,method="ngb")#
		} else#
		{#
			magnitude_raster_agg=aggregate(x=magnitude_raster,fact=fact,fun=mean)#
		}#
		#
		magnitude=setMinMax(magnitude)#
		min_magnitude=minValue(magnitude)#
		max_magnitude=maxValue(magnitude)#
		magnitude_raster_agg_points=rasterToPoints(magnitude_raster_agg,spatial=FALSE)#
		magnitude_raster_agg_points_normalized=(magnitude_stetch[2]-magnitude_stetch[1])*(#
				(magnitude_raster_agg_points[,3]-min_magnitude)/(max_magnitude-min_magnitude))+magnitude_stetch[1]#
		azimuth_raster_agg_points_u=sin(azimuth_raster_agg_points[,3])*(magnitude_raster_agg_points_normalized/2)#
		azimuth_raster_agg_points_v=cos(azimuth_raster_agg_points[,3])*(magnitude_raster_agg_points_normalized/2)	#
	}#
	#
	if(missing(arrow.ex))#
	{#
		arrow.ex=1/min(nrow(azimuth_raster_agg),ncol(azimuth_raster_agg))#
	}#
	#
	plot(basemap)#
	arrow.plot(azimuth_raster_agg_points[,1],azimuth_raster_agg_points[,2],#
			u=azimuth_raster_agg_points_u,#
			v=azimuth_raster_agg_points_v,#
			arrowfun=arrowfun,arrow.ex=arrow.ex,length=length)#
}
plot.azimuth(azimuth_raster,max_arrows_per_dim=10,na.rm=TRUE,basemap,#
		arrowfun=arrows,arrow.ex,length=.05,magnitude_raster,magnitude_stetch=c(.2,.8))
plot.azimuth(azimuth_raster,max_arrows_per_dim=25,na.rm=TRUE,basemap,#
		arrowfun=arrows,arrow.ex,length=.05,magnitude_raster,magnitude_stetch=c(.2,.8))
plot.azimuth(azimuth_raster,max_arrows_per_dim=25,na.rm=TRUE,basemap,#
		arrowfun=arrows,length=.05,magnitude_raster,magnitude_stetch=c(.2,.8))
plot.azimuth(azimuth_raster,max_arrows_per_dim=25,na.rm=TRUE,basemap,#
		length=.05,magnitude_raster,magnitude_stetch=c(.2,.8))
#' Plots an azimuth raster using arrows.#
#' @examples #
#' tahoe_lidar_bareearth <- raster(system.file("external/tahoe_lidar_bareearth.tif", package="STARStools"))#
#' tahoe_lidar_bareearth_azimuth <- slopeAspect(tahoe_lidar_bareearth,out=c('aspect'),unit='radians')#
#
#
#
plot.azimuth <- function(azimuth_raster,max_arrows_per_dim=25,na.rm=TRUE,basemap,#
		arrowfun=arrows,arrow.ex,length=.05,magnitude_raster,magnitude_stetch=c(.2,.8),#
		azimuth_raster_aggregate_method="ngb",magnitude_raster_aggregate_method)#
{#
	if(missing(basemap))#
	{#
		basemap=azimuth_raster#
	}#
	# Check the dimensions of the image.#
	ncol_azimuth_raster=ncol(azimuth_raster)#
	nrow_azimuth_raster=nrow(azimuth_raster)#
	#
	col_scale=ncol_azimuth_raster/max_arrows_per_dim#
	row_scale=nrow_azimuth_raster/max_arrows_per_dim#
	#
	fact=max(col_scale,row_scale)#
	#
	# These needs to be fixed, since this really slows this down.#
	if(azimuth_raster_aggregate_method=="ngb")#
	{#
		azimuth_raster_extent=projectExtent(azimuth_raster,projection(azimuth_raster))#
		new_res=res(azimuth_raster)*fact#
		res(azimuth_raster_extent)=new_res#
		azimuth_raster_agg=raster::resample(azimuth_raster, azimuth_raster_extent,method="ngb")#
	} else#
	{#
		azimuth_raster_agg=aggregate(x=azimuth_raster,fact=fact,fun=circ.mean.na.rm)#
	}#
	#
	azimuth_raster_agg_points=rasterToPoints(azimuth_raster_agg,spatial=FALSE)#
	#
	if(missing(magnitude_raster))#
	{#
		azimuth_raster_agg_points_u=sin(azimuth_raster_agg_points[,3])#
		azimuth_raster_agg_points_v=cos(azimuth_raster_agg_points[,3])#
	} else#
	{#
		if(azimuth_raster_aggregate_method=="ngb")#
		{#
			magnitude_raster_extent=projectExtent(magnitude_raster,projection(magnitude_raster))#
			new_res=res(magnitude_raster)*fact#
			res(magnitude_raster_extent)=new_res#
			magnitude_raster_agg=raster::resample(magnitude_raster, magnitude_raster_extent,method="ngb")#
		} else#
		{#
			magnitude_raster_agg=aggregate(x=magnitude_raster,fact=fact,fun=mean)#
		}#
		#
		magnitude=setMinMax(magnitude)#
		min_magnitude=minValue(magnitude)#
		max_magnitude=maxValue(magnitude)#
		magnitude_raster_agg_points=rasterToPoints(magnitude_raster_agg,spatial=FALSE)#
		magnitude_raster_agg_points_normalized=(magnitude_stetch[2]-magnitude_stetch[1])*(#
				(magnitude_raster_agg_points[,3]-min_magnitude)/(max_magnitude-min_magnitude))+magnitude_stetch[1]#
		azimuth_raster_agg_points_u=sin(azimuth_raster_agg_points[,3])*(magnitude_raster_agg_points_normalized/2)#
		azimuth_raster_agg_points_v=cos(azimuth_raster_agg_points[,3])*(magnitude_raster_agg_points_normalized/2)	#
	}#
	#
	if(missing(arrow.ex))#
	{#
		arrow.ex=(1/min(nrow(azimuth_raster_agg),ncol(azimuth_raster_agg)))/2#
	}#
	#
	plot(basemap)#
	arrow.plot(azimuth_raster_agg_points[,1],azimuth_raster_agg_points[,2],#
			u=azimuth_raster_agg_points_u,#
			v=azimuth_raster_agg_points_v,#
			arrowfun=arrowfun,arrow.ex=arrow.ex,length=length)#
}
plot.azimuth(azimuth_raster,max_arrows_per_dim=25,na.rm=TRUE,basemap,#
		length=.05,magnitude_raster,magnitude_stetch=c(.2,.8))
plot.azimuth(azimuth_raster,max_arrows_per_dim=25,na.rm=TRUE,basemap,#
		length=.05,magnitude_raster,magnitude_stetch=c(0,1))
plot.azimuth(azimuth_raster=tahoe_lidar_bareearth_azimuth,max_arrows_per_dim=25,na.rm=TRUE,basemap,#
		length=.05,magnitude_raster=tahoe_lidar_bareearth,magnitude_stetch=c(0,1))
plot.azimuth(azimuth_raster=tahoe_lidar_bareearth_azimuth,max_arrows_per_dim=25,na.rm=TRUE,basemap= tahoe_lidar_bareearth,#
		length=.05,magnitude_raster=tahoe_lidar_bareearth,magnitude_stetch=c(0,1))
plot.azimuth(azimuth_raster=tahoe_lidar_bareearth_azimuth,max_arrows_per_dim=25,na.rm=TRUE,basemap= tahoe_lidar_bareearth,#
		length=.05,magnitude_raster=tahoe_lidar_bareearth,magnitude_stetch=c(.2,.8))
plot.azimuth(azimuth_raster=tahoe_lidar_bareearth_azimuth,max_arrows_per_dim=25,na.rm=TRUE,basemap= tahoe_lidar_bareearth,#
		length=.05,magnitude_raster=tahoe_lidar_bareearth,magnitude_stetch=c(0,10))
plot.azimuth(azimuth_raster=tahoe_lidar_bareearth_azimuth,max_arrows_per_dim=25,na.rm=TRUE,basemap= tahoe_lidar_bareearth,length=.05,magnitude_raster=tahoe_lidar_bareearth,magnitude_stetch=c(0,1))
plot.azimuth(azimuth_raster=tahoe_lidar_bareearth_azimuth,max_arrows_per_dim=25,na.rm=TRUE,basemap= tahoe_lidar_bareearth,length=.05,magnitude_raster=tahoe_lidar_bareearth,magnitude_stetch=c(0,1))
#' Plots an azimuth raster using arrows.#
#' @examples #
#' tahoe_lidar_bareearth <- raster(system.file("external/tahoe_lidar_bareearth.tif", package="STARStools"))#
#' tahoe_lidar_bareearth_azimuth <- slopeAspect(tahoe_lidar_bareearth,out=c('aspect'),unit='radians')#
#
#
#
plot.azimuth <- function(azimuth_raster,max_arrows_per_dim=25,na.rm=TRUE,basemap,#
		arrowfun=arrows,arrow.ex,length=.05,magnitude_raster,magnitude_stetch=c(.2,.8),#
		azimuth_raster_aggregate_method="ngb",magnitude_raster_aggregate_method)#
{#
	if(missing(basemap))#
	{#
		basemap=azimuth_raster#
	}#
	# Check the dimensions of the image.#
	ncol_azimuth_raster=ncol(azimuth_raster)#
	nrow_azimuth_raster=nrow(azimuth_raster)#
	#
	col_scale=ncol_azimuth_raster/max_arrows_per_dim#
	row_scale=nrow_azimuth_raster/max_arrows_per_dim#
	#
	fact=max(col_scale,row_scale)#
	#
	# These needs to be fixed, since this really slows this down.#
	if(azimuth_raster_aggregate_method=="ngb")#
	{#
		azimuth_raster_extent=projectExtent(azimuth_raster,projection(azimuth_raster))#
		new_res=res(azimuth_raster)*fact#
		res(azimuth_raster_extent)=new_res#
		azimuth_raster_agg=raster::resample(azimuth_raster, azimuth_raster_extent,method="ngb")#
	} else#
	{#
		azimuth_raster_agg=aggregate(x=azimuth_raster,fact=fact,fun=circ.mean.na.rm)#
	}#
	#
	azimuth_raster_agg_points=rasterToPoints(azimuth_raster_agg,spatial=FALSE)#
	#
	if(missing(magnitude_raster))#
	{#
		print("no mag")#
		azimuth_raster_agg_points_u=sin(azimuth_raster_agg_points[,3])#
		azimuth_raster_agg_points_v=cos(azimuth_raster_agg_points[,3])#
	} else#
	{#
		if(azimuth_raster_aggregate_method=="ngb")#
		{#
			magnitude_raster_extent=projectExtent(magnitude_raster,projection(magnitude_raster))#
			new_res=res(magnitude_raster)*fact#
			res(magnitude_raster_extent)=new_res#
			magnitude_raster_agg=raster::resample(magnitude_raster, magnitude_raster_extent,method="ngb")#
		} else#
		{#
			magnitude_raster_agg=aggregate(x=magnitude_raster,fact=fact,fun=mean)#
		}#
		#
		magnitude=setMinMax(magnitude)#
		min_magnitude=minValue(magnitude)#
		max_magnitude=maxValue(magnitude)#
		magnitude_raster_agg_points=rasterToPoints(magnitude_raster_agg,spatial=FALSE)#
		magnitude_raster_agg_points_normalized=(magnitude_stetch[2]-magnitude_stetch[1])*(#
				(magnitude_raster_agg_points[,3]-min_magnitude)/(max_magnitude-min_magnitude))+magnitude_stetch[1]#
		azimuth_raster_agg_points_u=sin(azimuth_raster_agg_points[,3])*(magnitude_raster_agg_points_normalized/2)#
		azimuth_raster_agg_points_v=cos(azimuth_raster_agg_points[,3])*(magnitude_raster_agg_points_normalized/2)	#
	}#
	#
	if(missing(arrow.ex))#
	{#
		arrow.ex=(1/min(nrow(azimuth_raster_agg),ncol(azimuth_raster_agg)))/2#
	}#
	#
	plot(basemap)#
	arrow.plot(azimuth_raster_agg_points[,1],azimuth_raster_agg_points[,2],#
			u=azimuth_raster_agg_points_u,#
			v=azimuth_raster_agg_points_v,#
			arrowfun=arrowfun,arrow.ex=arrow.ex,length=length)#
}
plot.azimuth(azimuth_raster=tahoe_lidar_bareearth_azimuth,max_arrows_per_dim=25,na.rm=TRUE,basemap= tahoe_lidar_bareearth,length=.05,magnitude_raster=tahoe_lidar_bareearth,magnitude_stetch=c(0,1))
#' Plots an azimuth raster using arrows.#
#' @examples #
#' tahoe_lidar_bareearth <- raster(system.file("external/tahoe_lidar_bareearth.tif", package="STARStools"))#
#' tahoe_lidar_bareearth_azimuth <- slopeAspect(tahoe_lidar_bareearth,out=c('aspect'),unit='radians')#
#
#
#
plot.azimuth <- function(azimuth_raster,max_arrows_per_dim=25,na.rm=TRUE,basemap,#
		arrowfun=arrows,arrow.ex,length=.05,magnitude_raster,magnitude_stetch=c(.2,.8),#
		azimuth_raster_aggregate_method="ngb",magnitude_raster_aggregate_method)#
{#
	if(missing(basemap))#
	{#
		basemap=azimuth_raster#
	}#
	# Check the dimensions of the image.#
	ncol_azimuth_raster=ncol(azimuth_raster)#
	nrow_azimuth_raster=nrow(azimuth_raster)#
	#
	col_scale=ncol_azimuth_raster/max_arrows_per_dim#
	row_scale=nrow_azimuth_raster/max_arrows_per_dim#
	#
	fact=max(col_scale,row_scale)#
	#
	# These needs to be fixed, since this really slows this down.#
	if(azimuth_raster_aggregate_method=="ngb")#
	{#
		azimuth_raster_extent=projectExtent(azimuth_raster,projection(azimuth_raster))#
		new_res=res(azimuth_raster)*fact#
		res(azimuth_raster_extent)=new_res#
		azimuth_raster_agg=raster::resample(azimuth_raster, azimuth_raster_extent,method="ngb")#
	} else#
	{#
		azimuth_raster_agg=aggregate(x=azimuth_raster,fact=fact,fun=circ.mean.na.rm)#
	}#
	#
	azimuth_raster_agg_points=rasterToPoints(azimuth_raster_agg,spatial=FALSE)#
	#
	if(missing(magnitude_raster))#
	{#
		azimuth_raster_agg_points_u=sin(azimuth_raster_agg_points[,3])#
		azimuth_raster_agg_points_v=cos(azimuth_raster_agg_points[,3])#
	} else#
	{#
		if(azimuth_raster_aggregate_method=="ngb")#
		{#
			print("nn")#
			magnitude_raster_extent=projectExtent(magnitude_raster,projection(magnitude_raster))#
			new_res=res(magnitude_raster)*fact#
			res(magnitude_raster_extent)=new_res#
			magnitude_raster_agg=raster::resample(magnitude_raster, magnitude_raster_extent,method="ngb")#
		} else#
		{#
			magnitude_raster_agg=aggregate(x=magnitude_raster,fact=fact,fun=mean)#
		}#
		#
		magnitude=setMinMax(magnitude)#
		min_magnitude=minValue(magnitude)#
		max_magnitude=maxValue(magnitude)#
		magnitude_raster_agg_points=rasterToPoints(magnitude_raster_agg,spatial=FALSE)#
		magnitude_raster_agg_points_normalized=(magnitude_stetch[2]-magnitude_stetch[1])*(#
				(magnitude_raster_agg_points[,3]-min_magnitude)/(max_magnitude-min_magnitude))+magnitude_stetch[1]#
		azimuth_raster_agg_points_u=sin(azimuth_raster_agg_points[,3])*(magnitude_raster_agg_points_normalized/2)#
		azimuth_raster_agg_points_v=cos(azimuth_raster_agg_points[,3])*(magnitude_raster_agg_points_normalized/2)	#
	}#
	#
	if(missing(arrow.ex))#
	{#
		arrow.ex=(1/min(nrow(azimuth_raster_agg),ncol(azimuth_raster_agg)))/2#
	}#
	#
	plot(basemap)#
	arrow.plot(azimuth_raster_agg_points[,1],azimuth_raster_agg_points[,2],#
			u=azimuth_raster_agg_points_u,#
			v=azimuth_raster_agg_points_v,#
			arrowfun=arrowfun,arrow.ex=arrow.ex,length=length)#
}
plot.azimuth(azimuth_raster=tahoe_lidar_bareearth_azimuth,max_arrows_per_dim=25,na.rm=TRUE,basemap= tahoe_lidar_bareearth,length=.05,magnitude_raster=tahoe_lidar_bareearth,magnitude_stetch=c(0,1))
?resample
magnitude_raster_extent=projectExtent(magnitude_raster,projection(magnitude_raster))#
			new_res=res(magnitude_raster)*fact#
			res(magnitude_raster_extent)=new_res#
			magnitude_raster_agg=raster::resample(magnitude_raster, magnitude_raster_extent,method="ngb")
new_res
magnitude_raster_agg
magnitude=setMinMax(magnitude_raster_agg)#
		min_magnitude=minValue(magnitude_raster_agg)#
		max_magnitude=maxValue(magnitude_raster_agg)
magnitude_raster_agg_points=rasterToPoints(magnitude_raster_agg,spatial=FALSE)
magnitude_raster_agg_points
magnitude_raster_agg_points_normalized=(magnitude_stetch[2]-magnitude_stetch[1])*(#
				(magnitude_raster_agg_points[,3]-min_magnitude)/(max_magnitude-min_magnitude))+magnitude_stetch[1]
magnitude_raster_agg_points_normalized
summary(magnitude_raster_agg_points_normalized)
		azimuth_raster_agg_points_u=sin(azimuth_raster_agg_points[,3])*(magnitude_raster_agg_points_normalized)#
		azimuth_raster_agg_points_v=cos(azimuth_raster_agg_points[,3])*(magnitude_raster_agg_points_normalized)
#' Plots an azimuth raster using arrows.#
#' @examples #
#' tahoe_lidar_bareearth <- raster(system.file("external/tahoe_lidar_bareearth.tif", package="STARStools"))#
#' tahoe_lidar_bareearth_azimuth <- slopeAspect(tahoe_lidar_bareearth,out=c('aspect'),unit='radians')#
#
#
#
plot.azimuth <- function(azimuth_raster,max_arrows_per_dim=25,na.rm=TRUE,basemap,#
		arrowfun=arrows,arrow.ex,length=.05,magnitude_raster,magnitude_stetch=c(.2,.8),#
		azimuth_raster_aggregate_method="ngb",magnitude_raster_aggregate_method)#
{#
	if(missing(basemap))#
	{#
		basemap=azimuth_raster#
	}#
	# Check the dimensions of the image.#
	ncol_azimuth_raster=ncol(azimuth_raster)#
	nrow_azimuth_raster=nrow(azimuth_raster)#
	#
	col_scale=ncol_azimuth_raster/max_arrows_per_dim#
	row_scale=nrow_azimuth_raster/max_arrows_per_dim#
	#
	fact=max(col_scale,row_scale)#
	#
	# These needs to be fixed, since this really slows this down.#
	if(azimuth_raster_aggregate_method=="ngb")#
	{#
		azimuth_raster_extent=projectExtent(azimuth_raster,projection(azimuth_raster))#
		new_res=res(azimuth_raster)*fact#
		res(azimuth_raster_extent)=new_res#
		azimuth_raster_agg=raster::resample(azimuth_raster, azimuth_raster_extent,method="ngb")#
	} else#
	{#
		azimuth_raster_agg=aggregate(x=azimuth_raster,fact=fact,fun=circ.mean.na.rm)#
	}#
	#
	azimuth_raster_agg_points=rasterToPoints(azimuth_raster_agg,spatial=FALSE)#
	#
	if(missing(magnitude_raster))#
	{#
		azimuth_raster_agg_points_u=sin(azimuth_raster_agg_points[,3])#
		azimuth_raster_agg_points_v=cos(azimuth_raster_agg_points[,3])#
	} else#
	{#
		if(azimuth_raster_aggregate_method=="ngb")#
		{#
			print("nn")#
			magnitude_raster_extent=projectExtent(magnitude_raster,projection(magnitude_raster))#
			new_res=res(magnitude_raster)*fact#
			res(magnitude_raster_extent)=new_res#
			magnitude_raster_agg=raster::resample(magnitude_raster, magnitude_raster_extent,method="ngb")#
		} else#
		{#
			magnitude_raster_agg=aggregate(x=magnitude_raster,fact=fact,fun=mean)#
		}#
		#
		magnitude=setMinMax(magnitude_raster_agg)#
		min_magnitude=minValue(magnitude_raster_agg)#
		max_magnitude=maxValue(magnitude_raster_agg)#
		magnitude_raster_agg_points=rasterToPoints(magnitude_raster_agg,spatial=FALSE)#
		magnitude_raster_agg_points_normalized=(magnitude_stetch[2]-magnitude_stetch[1])*(#
				(magnitude_raster_agg_points[,3]-min_magnitude)/(max_magnitude-min_magnitude))+magnitude_stetch[1]#
		azimuth_raster_agg_points_u=sin(azimuth_raster_agg_points[,3])*(magnitude_raster_agg_points_normalized)#
		azimuth_raster_agg_points_v=cos(azimuth_raster_agg_points[,3])*(magnitude_raster_agg_points_normalized)	#
	}#
	#
	if(missing(arrow.ex))#
	{#
		arrow.ex=(1/min(nrow(azimuth_raster_agg),ncol(azimuth_raster_agg)))/2#
	}#
	#
	plot(basemap)#
	arrow.plot(azimuth_raster_agg_points[,1],azimuth_raster_agg_points[,2],#
			u=azimuth_raster_agg_points_u,#
			v=azimuth_raster_agg_points_v,#
			arrowfun=arrowfun,arrow.ex=arrow.ex,length=length)#
}
plot.azimuth(azimuth_raster=tahoe_lidar_bareearth_azimuth,max_arrows_per_dim=25,na.rm=TRUE,basemap= tahoe_lidar_bareearth,length=.05,magnitude_raster=tahoe_lidar_bareearth,magnitude_stetch=c(0,1))
plot.azimuth(azimuth_raster=tahoe_lidar_bareearth_azimuth,max_arrows_per_dim=25,na.rm=TRUE,basemap= tahoe_lidar_bareearth,length=.05,magnitude_raster=tahoe_lidar_bareearth,magnitude_stetch=c(0.2,0.8))
#' Plots an azimuth raster using arrows.#
#' @examples #
#' tahoe_lidar_bareearth <- raster(system.file("external/tahoe_lidar_bareearth.tif", package="STARStools"))#
#' tahoe_lidar_bareearth_azimuth <- slopeAspect(tahoe_lidar_bareearth,out=c('aspect'),unit='radians')#
#
#
#
plot.azimuth <- function(azimuth_raster,max_arrows_per_dim=25,na.rm=TRUE,basemap,#
		arrowfun=arrows,arrow.ex,length=.05,magnitude_raster,magnitude_stetch=c(.2,.8),#
		azimuth_raster_aggregate_method="ngb",magnitude_raster_aggregate_method)#
{#
	if(missing(basemap))#
	{#
		basemap=azimuth_raster#
	}#
	# Check the dimensions of the image.#
	ncol_azimuth_raster=ncol(azimuth_raster)#
	nrow_azimuth_raster=nrow(azimuth_raster)#
	#
	col_scale=ncol_azimuth_raster/max_arrows_per_dim#
	row_scale=nrow_azimuth_raster/max_arrows_per_dim#
	#
	fact=max(col_scale,row_scale)#
	#
	# These needs to be fixed, since this really slows this down.#
	if(azimuth_raster_aggregate_method=="ngb")#
	{#
		azimuth_raster_extent=projectExtent(azimuth_raster,projection(azimuth_raster))#
		new_res=res(azimuth_raster)*fact#
		res(azimuth_raster_extent)=new_res#
		azimuth_raster_agg=raster::resample(azimuth_raster, azimuth_raster_extent,method="ngb")#
	} else#
	{#
		azimuth_raster_agg=aggregate(x=azimuth_raster,fact=fact,fun=circ.mean.na.rm)#
	}#
	#
	azimuth_raster_agg_points=rasterToPoints(azimuth_raster_agg,spatial=FALSE)#
	#
	if(missing(magnitude_raster))#
	{#
		azimuth_raster_agg_points_u=sin(azimuth_raster_agg_points[,3])#
		azimuth_raster_agg_points_v=cos(azimuth_raster_agg_points[,3])#
	} else#
	{#
		if(azimuth_raster_aggregate_method=="ngb")#
		{#
			print("nn")#
			magnitude_raster_extent=projectExtent(magnitude_raster,projection(magnitude_raster))#
			new_res=res(magnitude_raster)*fact#
			res(magnitude_raster_extent)=new_res#
			magnitude_raster_agg=raster::resample(magnitude_raster, magnitude_raster_extent,method="ngb")#
		} else#
		{#
			magnitude_raster_agg=aggregate(x=magnitude_raster,fact=fact,fun=mean)#
		}#
		#
		magnitude=setMinMax(magnitude_raster_agg)#
		min_magnitude=minValue(magnitude_raster_agg)#
		max_magnitude=maxValue(magnitude_raster_agg)#
		magnitude_raster_agg_points=rasterToPoints(magnitude_raster_agg,spatial=FALSE)#
		magnitude_raster_agg_points_normalized=(magnitude_stetch[2]-magnitude_stetch[1])*(#
				(magnitude_raster_agg_points[,3]-min_magnitude)/(max_magnitude-min_magnitude))+magnitude_stetch[1]#
		azimuth_raster_agg_points_u=sin(azimuth_raster_agg_points[,3])*(magnitude_raster_agg_points_normalized)#
		azimuth_raster_agg_points_v=cos(azimuth_raster_agg_points[,3])*(magnitude_raster_agg_points_normalized)	#
	}#
	#
	if(missing(arrow.ex))#
	{#
		arrow.ex=(1/min(nrow(azimuth_raster_agg),ncol(azimuth_raster_agg)))#
	}#
	#
	plot(basemap)#
	arrow.plot(azimuth_raster_agg_points[,1],azimuth_raster_agg_points[,2],#
			u=azimuth_raster_agg_points_u,#
			v=azimuth_raster_agg_points_v,#
			arrowfun=arrowfun,arrow.ex=arrow.ex,length=length)#
}
plot.azimuth(azimuth_raster=tahoe_lidar_bareearth_azimuth,max_arrows_per_dim=25,na.rm=TRUE,basemap= tahoe_lidar_bareearth,length=.05,magnitude_raster=tahoe_lidar_bareearth,magnitude_stetch=c(0.2,0.8))
?arrow.plot
?arrow
?length
?arrows
tahoe_lidar_bareearth <- raster(system.file("external/tahoe_lidar_bareearth.tif", package="STARStools"))
tahoe_lidar_bareearth_azimuth <- slopeAspect(tahoe_lidar_bareearth,out=c('aspect'),unit='radians')
#' Plots an azimuth raster using arrows.#
#' @param azimuth_raster RasterLayer. A raster with azimuth values in units of radians.#
#' @param basemap RasterLayer. The underlying image (defaults to azimuth_raster).#
#' @param magnitude_raster RasterLayer. An optional raster which is used to scale the arrow lengths.#
#' @param max_arrows_per_dim Numeric. The maximum number of arrows to display in the longest dimension.#
#' @param arrowfun	The arrow function to use (see ?arrow.plot). #
#' @param arrow.ex Numeric. Controls the length of the arrows (see ?arrow.plot).  In general, don't set this as the length will be chosen based on the arrow spacing.#
#' @param length Numeric. Length of the edges of the arrow head (in inches).#
#' @param magnitude_stetch Ignore.  Not currently working.#
#' @param azimuth_raster_aggregate_method Character. Function used when resampling the azimuth raster. Defaults to "ngb" (nearest neighbor), but can be "pa" (pixel aggregate).#
#' @param magnitude_raster_aggregate_method Character. Function used when resampling the magnitude raster. Defaults to "ngb" (nearest neighbor), but can be "pa" (pixel aggregate).#
#' @param na.rm Logical. Remove NAs when aggregate_method="pa"?#
#' @examples #
#' tahoe_lidar_bareearth <- raster(system.file("external/tahoe_lidar_bareearth.tif", package="STARStools"))#
#' tahoe_lidar_bareearth_azimuth <- slopeAspect(tahoe_lidar_bareearth,out=c('aspect'),unit='radians')#
#' plot.azimuth(azimuth_raster=tahoe_lidar_bareearth_azimuth,basemap=tahoe_lidar_bareearth,magnitude=tahoe_lidar_bareearth,max_arrows_per_dim=25)#
#' @author Jonathan A. Greenberg \email{STARStools@@estarcion.net}#
#' @seealso \code{\link{arrow.plot}} #
#' @seealso \code{\link{arrows}} #
#
#
plot.azimuth <- function(azimuth_raster,basemap,magnitude_raster,#
		max_arrows_per_dim=25,arrowfun=arrows,arrow.ex,length=.05,magnitude_stetch=c(.2,.8),#
		azimuth_raster_aggregate_method="ngb",magnitude_raster_aggregate_method,na.rm=TRUE)#
{#
	if(missing(basemap))#
	{#
		basemap=azimuth_raster#
	}#
	# Check the dimensions of the image.#
	ncol_azimuth_raster=ncol(azimuth_raster)#
	nrow_azimuth_raster=nrow(azimuth_raster)#
	#
	col_scale=ncol_azimuth_raster/max_arrows_per_dim#
	row_scale=nrow_azimuth_raster/max_arrows_per_dim#
	#
	fact=max(col_scale,row_scale)#
	#
	# These needs to be fixed, since this really slows this down.#
	if(azimuth_raster_aggregate_method=="ngb")#
	{#
		azimuth_raster_extent=projectExtent(azimuth_raster,projection(azimuth_raster))#
		new_res=res(azimuth_raster)*fact#
		res(azimuth_raster_extent)=new_res#
		azimuth_raster_agg=raster::resample(azimuth_raster, azimuth_raster_extent,method="ngb")#
	} else#
	{#
		azimuth_raster_agg=aggregate(x=azimuth_raster,fact=fact,fun=circ.mean.na.rm)#
	}#
	#
	azimuth_raster_agg_points=rasterToPoints(azimuth_raster_agg,spatial=FALSE)#
	#
	if(missing(magnitude_raster))#
	{#
		azimuth_raster_agg_points_u=sin(azimuth_raster_agg_points[,3])#
		azimuth_raster_agg_points_v=cos(azimuth_raster_agg_points[,3])#
	} else#
	{#
		if(azimuth_raster_aggregate_method=="ngb")#
		{#
			print("nn")#
			magnitude_raster_extent=projectExtent(magnitude_raster,projection(magnitude_raster))#
			new_res=res(magnitude_raster)*fact#
			res(magnitude_raster_extent)=new_res#
			magnitude_raster_agg=raster::resample(magnitude_raster, magnitude_raster_extent,method="ngb")#
		} else#
		{#
			magnitude_raster_agg=aggregate(x=magnitude_raster,fact=fact,fun=mean)#
		}#
		#
		magnitude=setMinMax(magnitude_raster_agg)#
		min_magnitude=minValue(magnitude_raster_agg)#
		max_magnitude=maxValue(magnitude_raster_agg)#
		magnitude_raster_agg_points=rasterToPoints(magnitude_raster_agg,spatial=FALSE)#
		magnitude_raster_agg_points_normalized=(magnitude_stetch[2]-magnitude_stetch[1])*(#
				(magnitude_raster_agg_points[,3]-min_magnitude)/(max_magnitude-min_magnitude))+magnitude_stetch[1]#
		azimuth_raster_agg_points_u=sin(azimuth_raster_agg_points[,3])*(magnitude_raster_agg_points_normalized)#
		azimuth_raster_agg_points_v=cos(azimuth_raster_agg_points[,3])*(magnitude_raster_agg_points_normalized)	#
	}#
	#
	if(missing(arrow.ex))#
	{#
		arrow.ex=(1/min(nrow(azimuth_raster_agg),ncol(azimuth_raster_agg)))#
	}#
	#
	plot(basemap)#
	arrow.plot(azimuth_raster_agg_points[,1],azimuth_raster_agg_points[,2],#
			u=azimuth_raster_agg_points_u,#
			v=azimuth_raster_agg_points_v,#
			arrowfun=arrowfun,arrow.ex=arrow.ex,length=length)#
}
plot.azimuth(azimuth_raster=tahoe_lidar_bareearth_azimuth,basemap=tahoe_lidar_bareearth,magnitude=tahoe_lidar_bareearth,max_arrows_per_dim=25)
plot.azimuth(azimuth_raster=tahoe_lidar_bareearth_azimuth,basemap=tahoe_lidar_bareearth,magnitude=tahoe_lidar_bareearth,max_arrows_per_dim=25)
plot.azimuth(azimuth_raster=tahoe_lidar_bareearth_azimuth)
plot.azimuth(azimuth_raster=tahoe_lidar_bareearth_azimuth)
#' Plots an azimuth raster using arrows.#
#' @param azimuth_raster RasterLayer. A raster with azimuth values in units of radians.#
#' @param basemap RasterLayer. The underlying image (defaults to azimuth_raster).#
#' @param magnitude_raster RasterLayer. An optional raster which is used to scale the arrow lengths.#
#' @param max_arrows_per_dim Numeric. The maximum number of arrows to display in the longest dimension.#
#' @param arrowfun	The arrow function to use (see ?arrow.plot). #
#' @param arrow.ex Numeric. Controls the length of the arrows (see ?arrow.plot).  In general, don't set this as the length will be chosen based on the arrow spacing.#
#' @param length Numeric. Length of the edges of the arrow head (in inches).#
#' @param magnitude_stetch Ignore.  Not currently working.#
#' @param azimuth_raster_aggregate_method Character. Function used when resampling the azimuth raster. Defaults to "ngb" (nearest neighbor), but can be "pa" (pixel aggregate).#
#' @param magnitude_raster_aggregate_method Character. Function used when resampling the magnitude raster. Defaults to "ngb" (nearest neighbor), but can be "pa" (pixel aggregate).#
#' @param na.rm Logical. Remove NAs when aggregate_method="pa"?#
#' @examples #
#' tahoe_lidar_bareearth <- raster(system.file("external/tahoe_lidar_bareearth.tif", package="STARStools"))#
#' tahoe_lidar_bareearth_azimuth <- slopeAspect(tahoe_lidar_bareearth,out=c('aspect'),unit='radians')#
#' plot.azimuth(azimuth_raster=tahoe_lidar_bareearth_azimuth,basemap=tahoe_lidar_bareearth,magnitude=tahoe_lidar_bareearth,max_arrows_per_dim=25)#
#' @author Jonathan A. Greenberg \email{STARStools@@estarcion.net}#
#' @seealso \code{\link{arrow.plot}} #
#' @seealso \code{\link{arrows}} #
#
#
plot.azimuth <- function(azimuth_raster,basemap,magnitude_raster,#
		max_arrows_per_dim=25,arrowfun=arrows,arrow.ex,length=.05,magnitude_stetch=c(.2,.8),#
		azimuth_raster_aggregate_method="ngb",magnitude_raster_aggregate_method,na.rm=TRUE)#
{#
	if(missing(basemap))#
	{#
		basemap=azimuth_raster#
	}#
	# Check the dimensions of the image.#
	ncol_azimuth_raster=ncol(azimuth_raster)#
	nrow_azimuth_raster=nrow(azimuth_raster)#
	#
	col_scale=ncol_azimuth_raster/max_arrows_per_dim#
	row_scale=nrow_azimuth_raster/max_arrows_per_dim#
	#
	fact=max(col_scale,row_scale)#
	#
	# These needs to be fixed, since this really slows this down.#
	if(azimuth_raster_aggregate_method=="ngb")#
	{#
		azimuth_raster_extent=projectExtent(azimuth_raster,projection(azimuth_raster))#
		new_res=res(azimuth_raster)*fact#
		res(azimuth_raster_extent)=new_res#
		azimuth_raster_agg=raster::resample(azimuth_raster, azimuth_raster_extent,method="ngb")#
	} else#
	{#
		azimuth_raster_agg=aggregate(x=azimuth_raster,fact=fact,fun=circ.mean.na.rm)#
	}#
	#
	azimuth_raster_agg_points=rasterToPoints(azimuth_raster_agg,spatial=FALSE)#
	#
	if(missing(magnitude_raster))#
	{#
		azimuth_raster_agg_points_u=sin(azimuth_raster_agg_points[,3])#
		azimuth_raster_agg_points_v=cos(azimuth_raster_agg_points[,3])#
	} else#
	{#
		if(azimuth_raster_aggregate_method=="ngb")#
		{#
			print("nn")#
			magnitude_raster_extent=projectExtent(magnitude_raster,projection(magnitude_raster))#
			new_res=res(magnitude_raster)*fact#
			res(magnitude_raster_extent)=new_res#
			magnitude_raster_agg=raster::resample(magnitude_raster, magnitude_raster_extent,method="ngb")#
		} else#
		{#
			magnitude_raster_agg=aggregate(x=magnitude_raster,fact=fact,fun=mean)#
		}#
		#
		magnitude=setMinMax(magnitude_raster_agg)#
		min_magnitude=minValue(magnitude_raster_agg)#
		max_magnitude=maxValue(magnitude_raster_agg)#
		magnitude_raster_agg_points=rasterToPoints(magnitude_raster_agg,spatial=FALSE)#
		magnitude_raster_agg_points_normalized=(magnitude_stetch[2]-magnitude_stetch[1])*(#
				(magnitude_raster_agg_points[,3]-min_magnitude)/(max_magnitude-min_magnitude))+magnitude_stetch[1]#
		azimuth_raster_agg_points_u=sin(azimuth_raster_agg_points[,3])*(magnitude_raster_agg_points_normalized)#
		azimuth_raster_agg_points_v=cos(azimuth_raster_agg_points[,3])*(magnitude_raster_agg_points_normalized)	#
	}#
	#
	if(missing(arrow.ex))#
	{#
		arrow.ex=(1/min(nrow(azimuth_raster_agg),ncol(azimuth_raster_agg)))/2#
	}#
	#
	plot(basemap)#
	arrow.plot(azimuth_raster_agg_points[,1],azimuth_raster_agg_points[,2],#
			u=azimuth_raster_agg_points_u,#
			v=azimuth_raster_agg_points_v,#
			arrowfun=arrowfun,arrow.ex=arrow.ex,length=length)#
}
plot.azimuth(azimuth_raster=tahoe_lidar_bareearth_azimuth)
#' Plots an azimuth raster using arrows.#
#' @param azimuth_raster RasterLayer. A raster with azimuth values in units of radians.#
#' @param basemap RasterLayer. The underlying image (defaults to azimuth_raster).#
#' @param magnitude_raster RasterLayer. An optional raster which is used to scale the arrow lengths.#
#' @param max_arrows_per_dim Numeric. The maximum number of arrows to display in the longest dimension.#
#' @param arrowfun	The arrow function to use (see ?arrow.plot). #
#' @param arrow.ex Numeric. Controls the length of the arrows (see ?arrow.plot).  In general, don't set this as the length will be chosen based on the arrow spacing.#
#' @param length Numeric. Length of the edges of the arrow head (in inches).#
#' @param magnitude_stetch Ignore.  Not currently working.#
#' @param azimuth_raster_aggregate_method Character. Function used when resampling the azimuth raster. Defaults to "ngb" (nearest neighbor), but can be "pa" (pixel aggregate).#
#' @param magnitude_raster_aggregate_method Character. Function used when resampling the magnitude raster. Defaults to "ngb" (nearest neighbor), but can be "pa" (pixel aggregate).#
#' @param na.rm Logical. Remove NAs when aggregate_method="pa"?#
#' @examples #
#' tahoe_lidar_bareearth <- raster(system.file("external/tahoe_lidar_bareearth.tif", package="STARStools"))#
#' tahoe_lidar_bareearth_azimuth <- slopeAspect(tahoe_lidar_bareearth,out=c('aspect'),unit='radians')#
#' plot.azimuth(azimuth_raster=tahoe_lidar_bareearth_azimuth,basemap=tahoe_lidar_bareearth,magnitude=tahoe_lidar_bareearth,max_arrows_per_dim=25)#
#' @author Jonathan A. Greenberg \email{STARStools@@estarcion.net}#
#' @seealso \code{\link{arrow.plot}} #
#' @seealso \code{\link{arrows}} #
#
#
plot.azimuth <- function(azimuth_raster,basemap,magnitude_raster,#
		max_arrows_per_dim=25,arrowfun=arrows,arrow.ex,length=.05,magnitude_stetch=c(.2,.8),#
		azimuth_raster_aggregate_method="ngb",magnitude_raster_aggregate_method,na.rm=TRUE)#
{#
	if(missing(basemap))#
	{#
		basemap=azimuth_raster#
	}#
	# Check the dimensions of the image.#
	ncol_azimuth_raster=ncol(azimuth_raster)#
	nrow_azimuth_raster=nrow(azimuth_raster)#
	#
	col_scale=ncol_azimuth_raster/max_arrows_per_dim#
	row_scale=nrow_azimuth_raster/max_arrows_per_dim#
	#
	fact=max(col_scale,row_scale)#
	#
	# These needs to be fixed, since this really slows this down.#
	if(azimuth_raster_aggregate_method=="ngb")#
	{#
		azimuth_raster_extent=projectExtent(azimuth_raster,projection(azimuth_raster))#
		new_res=res(azimuth_raster)*fact#
		res(azimuth_raster_extent)=new_res#
		azimuth_raster_agg=raster::resample(azimuth_raster, azimuth_raster_extent,method="ngb")#
	} else#
	{#
		azimuth_raster_agg=aggregate(x=azimuth_raster,fact=fact,fun=circ.mean.na.rm)#
	}#
	#
	azimuth_raster_agg_points=rasterToPoints(azimuth_raster_agg,spatial=FALSE)#
	#
	if(missing(magnitude_raster))#
	{#
		azimuth_raster_agg_points_u=sin(azimuth_raster_agg_points[,3])#
		azimuth_raster_agg_points_v=cos(azimuth_raster_agg_points[,3])#
	} else#
	{#
		if(azimuth_raster_aggregate_method=="ngb")#
		{#
			print("nn")#
			magnitude_raster_extent=projectExtent(magnitude_raster,projection(magnitude_raster))#
			new_res=res(magnitude_raster)*fact#
			res(magnitude_raster_extent)=new_res#
			magnitude_raster_agg=raster::resample(magnitude_raster, magnitude_raster_extent,method="ngb")#
		} else#
		{#
			magnitude_raster_agg=aggregate(x=magnitude_raster,fact=fact,fun=mean)#
		}#
		#
		magnitude=setMinMax(magnitude_raster_agg)#
		min_magnitude=minValue(magnitude_raster_agg)#
		max_magnitude=maxValue(magnitude_raster_agg)#
		magnitude_raster_agg_points=rasterToPoints(magnitude_raster_agg,spatial=FALSE)#
		magnitude_raster_agg_points_normalized=(magnitude_stetch[2]-magnitude_stetch[1])*(#
				(magnitude_raster_agg_points[,3]-min_magnitude)/(max_magnitude-min_magnitude))+magnitude_stetch[1]#
		azimuth_raster_agg_points_u=sin(azimuth_raster_agg_points[,3])*(magnitude_raster_agg_points_normalized)#
		azimuth_raster_agg_points_v=cos(azimuth_raster_agg_points[,3])*(magnitude_raster_agg_points_normalized)	#
	}#
	#
	if(missing(arrow.ex))#
	{#
		arrow.ex=(1/min(nrow(azimuth_raster_agg),ncol(azimuth_raster_agg)))#
	}#
	#
	plot(basemap)#
	arrow.plot(azimuth_raster_agg_points[,1],azimuth_raster_agg_points[,2],#
			u=azimuth_raster_agg_points_u,#
			v=azimuth_raster_agg_points_v,#
			arrowfun=arrowfun,arrow.ex=arrow.ex,length=length)#
}
plot.azimuth(azimuth_raster=tahoe_lidar_bareearth_azimuth)
plot.azimuth(azimuth_raster=tahoe_lidar_bareearth_azimuth,
)
#' Plots an azimuth raster using arrows.#
#' @param azimuth_raster RasterLayer. A raster with azimuth values in units of radians.#
#' @param basemap_raster RasterLayer. The underlying image (defaults to azimuth_raster).#
#' @param magnitude_raster RasterLayer. An optional raster which is used to scale the arrow lengths.#
#' @param max_arrows_per_dim Numeric. The maximum number of arrows to display in the longest dimension.#
#' @param arrowfun	The arrow function to use (see ?arrow.plot). #
#' @param arrow.ex Numeric. Controls the length of the arrows (see ?arrow.plot).  In general, don't set this as the length will be chosen based on the arrow spacing.#
#' @param length Numeric. Length of the edges of the arrow head (in inches).#
#' @param magnitude_stetch Ignore.  Not currently working.#
#' @param azimuth_raster_aggregate_method Character. Function used when resampling the azimuth raster. Defaults to "ngb" (nearest neighbor), but can be "pa" (pixel aggregate).#
#' @param magnitude_raster_aggregate_method Character. Function used when resampling the magnitude raster. Defaults to "ngb" (nearest neighbor), but can be "pa" (pixel aggregate).#
#' @param na.rm Logical. Remove NAs when aggregate_method="pa"?#
#' @examples #
#' tahoe_lidar_bareearth <- raster(system.file("external/tahoe_lidar_bareearth.tif", package="STARStools"))#
#' tahoe_lidar_bareearth_azimuth <- slopeAspect(tahoe_lidar_bareearth,out=c('aspect'),unit='radians')#
#' plot.azimuth(azimuth_raster=tahoe_lidar_bareearth_azimuth,basemap=tahoe_lidar_bareearth,magnitude_raster=tahoe_lidar_bareearth,max_arrows_per_dim=25)#
#' @author Jonathan A. Greenberg \email{STARStools@@estarcion.net}#
#' @seealso \code{\link{arrow.plot}} #
#' @seealso \code{\link{arrows}} #
#
#
plot.azimuth <- function(azimuth_raster,basemap_raster,magnitude_raster,#
		max_arrows_per_dim=25,arrowfun=arrows,arrow.ex,length=.05,magnitude_stetch=c(.2,.8),#
		azimuth_raster_aggregate_method="ngb",magnitude_raster_aggregate_method,na.rm=TRUE)#
{#
	if(missing(basemap_raster))#
	{#
		basemap_raster=azimuth_raster#
	}#
	# Check the dimensions of the image.#
	ncol_azimuth_raster=ncol(azimuth_raster)#
	nrow_azimuth_raster=nrow(azimuth_raster)#
	#
	col_scale=ncol_azimuth_raster/max_arrows_per_dim#
	row_scale=nrow_azimuth_raster/max_arrows_per_dim#
	#
	fact=max(col_scale,row_scale)#
	#
	# These needs to be fixed, since this really slows this down.#
	if(azimuth_raster_aggregate_method=="ngb")#
	{#
		azimuth_raster_extent=projectExtent(azimuth_raster,projection(azimuth_raster))#
		new_res=res(azimuth_raster)*fact#
		res(azimuth_raster_extent)=new_res#
		azimuth_raster_agg=raster::resample(azimuth_raster, azimuth_raster_extent,method="ngb")#
	} else#
	{#
		azimuth_raster_agg=aggregate(x=azimuth_raster,fact=fact,fun=circ.mean.na.rm)#
	}#
	#
	azimuth_raster_agg_points=rasterToPoints(azimuth_raster_agg,spatial=FALSE)#
	#
	if(missing(magnitude_raster))#
	{#
		azimuth_raster_agg_points_u=sin(azimuth_raster_agg_points[,3])#
		azimuth_raster_agg_points_v=cos(azimuth_raster_agg_points[,3])#
	} else#
	{#
		if(azimuth_raster_aggregate_method=="ngb")#
		{#
			print("nn")#
			magnitude_raster_extent=projectExtent(magnitude_raster,projection(magnitude_raster))#
			new_res=res(magnitude_raster)*fact#
			res(magnitude_raster_extent)=new_res#
			magnitude_raster_agg=raster::resample(magnitude_raster, magnitude_raster_extent,method="ngb")#
		} else#
		{#
			magnitude_raster_agg=aggregate(x=magnitude_raster,fact=fact,fun=mean)#
		}#
		#
		magnitude=setMinMax(magnitude_raster_agg)#
		min_magnitude=minValue(magnitude_raster_agg)#
		max_magnitude=maxValue(magnitude_raster_agg)#
		magnitude_raster_agg_points=rasterToPoints(magnitude_raster_agg,spatial=FALSE)#
		magnitude_raster_agg_points_normalized=(magnitude_stetch[2]-magnitude_stetch[1])*(#
				(magnitude_raster_agg_points[,3]-min_magnitude)/(max_magnitude-min_magnitude))+magnitude_stetch[1]#
		azimuth_raster_agg_points_u=sin(azimuth_raster_agg_points[,3])*(magnitude_raster_agg_points_normalized)#
		azimuth_raster_agg_points_v=cos(azimuth_raster_agg_points[,3])*(magnitude_raster_agg_points_normalized)	#
	}#
	#
	if(missing(arrow.ex))#
	{#
		arrow.ex=(1/min(nrow(azimuth_raster_agg),ncol(azimuth_raster_agg)))#
	}#
	#
	plot(basemap_raster)#
	arrow.plot(azimuth_raster_agg_points[,1],azimuth_raster_agg_points[,2],#
			u=azimuth_raster_agg_points_u,#
			v=azimuth_raster_agg_points_v,#
			arrowfun=arrowfun,arrow.ex=arrow.ex,length=length)#
}
?resample
plot.azimuth(azimuth_raster=tahoe_lidar_bareearth_azimuth,basemap_raster=tahoe_lidar_bareearth,magnitude_raster=tahoe_lidar_bareearth,max_arrows_per_dim=25)
# R CMD CHECK /Users/jonathan/Documents/code/eclipse/STARStools/pkg/STARStools#
#
require(roxygen)#
setwd("/Users/jonathan/Documents/code/eclipse/STARStools/pkg/STARStools")#
roxygenize(package.dir="/Users/jonathan/Documents/code/eclipse/STARStools/pkg/STARStools",roxygen.dir="/Users/jonathan/Documents/code/eclipse/STARStools/pkg/STARStools",copy.package=FALSE,unlink.target=FALSE)
# R CMD CHECK /Users/jonathan/Documents/code/eclipse/STARStools/pkg/STARStools#
#
require(roxygen)#
setwd("/Users/jonathan/Documents/code/eclipse/STARStools/pkg/STARStools")#
roxygenize(package.dir="/Users/jonathan/Documents/code/eclipse/STARStools/pkg/STARStools",roxygen.dir="/Users/jonathan/Documents/code/eclipse/STARStools/pkg/STARStools",copy.package=FALSE,unlink.target=FALSE)
#' circ.mean with na.rm capability.#
#' @param x vector of data points measured in radians or degrees.#
#' @param na.rm Logical. Remove NAs before calculating?#
#' @param unit Character. Input direction unit. Default is 'radians'.  Setting to 'degrees' assumes x is in degrees, and also returns the values in degrees.#
#' @author Jonathan A. Greenberg \email{STARStools@@estarcion.net}#
#' @example #
#' degree_vector_with_NA=c(359,1,45,NA)#
#' circ.mean.na.rm(degree_vector_with_NA,na.rm=FALSE,unit='degrees')#
#' circ.mean.na.rm(degree_vector_with_NA,na.rm=TRUE,unit='degrees')#
#' @export #
#
circ.mean.na.rm = function(x,unit="radians",na.rm=TRUE)#
{#
	if(missing(unit))#
	{#
		unit="radians"#
	}#
	#
	if(unit=="degrees")#
	{#
		x=rad(x)#
	}#
	#
	if(na.rm)#
	{#
		x_mean=circ.mean(na.omit(x))#
	} else#
	{#
		x_mean=circ.mean(x)#
	}#
	#
	if(unit=="degrees")#
	{#
		x_mean=deg(x_mean)#
	}#
	return(x_mean)#
}
degree_vector_with_NA=c(359,1,45,NA)
circ.mean.na.rm(degree_vector_with_NA,na.rm=FALSE,unit='degrees')
circ.mean.na.rm(degree_vector_with_NA,na.rm=TRUE,unit='degrees')
# R CMD CHECK /Users/jonathan/Documents/code/eclipse/STARStools/pkg/STARStools#
#
require(roxygen)#
setwd("/Users/jonathan/Documents/code/eclipse/STARStools/pkg/STARStools")#
roxygenize(package.dir="/Users/jonathan/Documents/code/eclipse/STARStools/pkg/STARStools",roxygen.dir="/Users/jonathan/Documents/code/eclipse/STARStools/pkg/STARStools",copy.package=FALSE,unlink.target=FALSE)
# R CMD CHECK /Users/jonathan/Documents/code/eclipse/STARStools/pkg/STARStools#
#
require(roxygen)#
setwd("/Users/jonathan/Documents/code/eclipse/STARStools/pkg/STARStools")#
roxygenize(package.dir="/Users/jonathan/Documents/code/eclipse/STARStools/pkg/STARStools",roxygen.dir="/Users/jonathan/Documents/code/eclipse/STARStools/pkg/STARStools",copy.package=FALSE,unlink.target=FALSE)
# R CMD CHECK /Users/jonathan/Documents/code/eclipse/STARStools/pkg/STARStools#
#
require(roxygen)#
setwd("/Users/jonathan/Documents/code/eclipse/STARStools/pkg/STARStools")#
roxygenize(package.dir="/Users/jonathan/Documents/code/eclipse/STARStools/pkg/STARStools",roxygen.dir="/Users/jonathan/Documents/code/eclipse/STARStools/pkg/STARStools",copy.package=FALSE,unlink.target=FALSE)
# R CMD CHECK /Users/jonathan/Documents/code/eclipse/STARStools/pkg/STARStools#
#
require(roxygen)#
setwd("/Users/jonathan/Documents/code/eclipse/STARStools/pkg/STARStools")#
roxygenize(package.dir="/Users/jonathan/Documents/code/eclipse/STARStools/pkg/STARStools",roxygen.dir="/Users/jonathan/Documents/code/eclipse/STARStools/pkg/STARStools",copy.package=FALSE,unlink.target=FALSE)
# R CMD CHECK /Users/jonathan/Documents/code/eclipse/STARStools/pkg/STARStools#
#
require(roxygen)#
setwd("/Users/jonathan/Documents/code/eclipse/STARStools/pkg/STARStools")#
roxygenize(package.dir="/Users/jonathan/Documents/code/eclipse/STARStools/pkg/STARStools",roxygen.dir="/Users/jonathan/Documents/code/eclipse/STARStools/pkg/STARStools",copy.package=FALSE,unlink.target=FALSE)
# R CMD CHECK /Users/jonathan/Documents/code/eclipse/STARStools/pkg/STARStools#
#
require(roxygen)#
setwd("/Users/jonathan/Documents/code/eclipse/STARStools/pkg/STARStools")#
roxygenize(package.dir="/Users/jonathan/Documents/code/eclipse/STARStools/pkg/STARStools",roxygen.dir="/Users/jonathan/Documents/code/eclipse/STARStools/pkg/STARStools",copy.package=FALSE,unlink.target=FALSE)
install.packages("STARStools", repos="http://R-Forge.R-project.org")
